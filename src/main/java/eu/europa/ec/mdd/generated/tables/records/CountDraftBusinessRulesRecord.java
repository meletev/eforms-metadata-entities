/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.enums.CountDraftBusinessRulesType;
import eu.europa.ec.mdd.generated.tables.CountDraftBusinessRules;
import eu.europa.ec.mdd.generated.tables.interfaces.ICountDraftBusinessRules;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountDraftBusinessRulesRecord extends TableRecordImpl<CountDraftBusinessRulesRecord> implements Record4<CountDraftBusinessRulesType, Long, Long, Long>, ICountDraftBusinessRules {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>count_draft_business_rules.type</code>.
   */
  @Override
  public void setType(CountDraftBusinessRulesType value) {
    set(0, value);
  }

  /**
   * Getter for <code>count_draft_business_rules.type</code>.
   */
  @Override
  public CountDraftBusinessRulesType getType() {
    return (CountDraftBusinessRulesType) get(0);
  }

  /**
   * Setter for <code>count_draft_business_rules.draft</code>.
   */
  @Override
  public void setDraft(Long value) {
    set(1, value);
  }

  /**
   * Getter for <code>count_draft_business_rules.draft</code>.
   */
  @Override
  public Long getDraft() {
    return (Long) get(1);
  }

  /**
   * Setter for <code>count_draft_business_rules.active</code>.
   */
  @Override
  public void setActive(Long value) {
    set(2, value);
  }

  /**
   * Getter for <code>count_draft_business_rules.active</code>.
   */
  @Override
  public Long getActive() {
    return (Long) get(2);
  }

  /**
   * Setter for <code>count_draft_business_rules.total</code>.
   */
  @Override
  public void setTotal(Long value) {
    set(3, value);
  }

  /**
   * Getter for <code>count_draft_business_rules.total</code>.
   */
  @Override
  public Long getTotal() {
    return (Long) get(3);
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row4<CountDraftBusinessRulesType, Long, Long, Long> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<CountDraftBusinessRulesType, Long, Long, Long> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<CountDraftBusinessRulesType> field1() {
    return CountDraftBusinessRules.COUNT_DRAFT_BUSINESS_RULES.TYPE;
  }

  @Override
  public Field<Long> field2() {
    return CountDraftBusinessRules.COUNT_DRAFT_BUSINESS_RULES.DRAFT;
  }

  @Override
  public Field<Long> field3() {
    return CountDraftBusinessRules.COUNT_DRAFT_BUSINESS_RULES.ACTIVE;
  }

  @Override
  public Field<Long> field4() {
    return CountDraftBusinessRules.COUNT_DRAFT_BUSINESS_RULES.TOTAL;
  }

  @Override
  public CountDraftBusinessRulesType component1() {
    return getType();
  }

  @Override
  public Long component2() {
    return getDraft();
  }

  @Override
  public Long component3() {
    return getActive();
  }

  @Override
  public Long component4() {
    return getTotal();
  }

  @Override
  public CountDraftBusinessRulesType value1() {
    return getType();
  }

  @Override
  public Long value2() {
    return getDraft();
  }

  @Override
  public Long value3() {
    return getActive();
  }

  @Override
  public Long value4() {
    return getTotal();
  }

  @Override
  public CountDraftBusinessRulesRecord value1(CountDraftBusinessRulesType value) {
    setType(value);
    return this;
  }

  @Override
  public CountDraftBusinessRulesRecord value2(Long value) {
    setDraft(value);
    return this;
  }

  @Override
  public CountDraftBusinessRulesRecord value3(Long value) {
    setActive(value);
    return this;
  }

  @Override
  public CountDraftBusinessRulesRecord value4(Long value) {
    setTotal(value);
    return this;
  }

  @Override
  public CountDraftBusinessRulesRecord values(CountDraftBusinessRulesType value1, Long value2, Long value3, Long value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICountDraftBusinessRules from) {
    setType(from.getType());
    setDraft(from.getDraft());
    setActive(from.getActive());
    setTotal(from.getTotal());
  }

  @Override
  public <E extends ICountDraftBusinessRules> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached CountDraftBusinessRulesRecord
   */
  public CountDraftBusinessRulesRecord() {
    super(CountDraftBusinessRules.COUNT_DRAFT_BUSINESS_RULES);
  }

  /**
   * Create a detached, initialised CountDraftBusinessRulesRecord
   */
  public CountDraftBusinessRulesRecord(CountDraftBusinessRulesType type, Long draft, Long active, Long total) {
    super(CountDraftBusinessRules.COUNT_DRAFT_BUSINESS_RULES);

    setType(type);
    setDraft(draft);
    setActive(active);
    setTotal(total);
  }
}
