/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.DataType;
import eu.europa.ec.mdd.generated.tables.interfaces.IDataType;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataTypeRecord extends UpdatableRecordImpl<DataTypeRecord> implements Record7<String, String, Boolean, String, String, String, String>, IDataType {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>data_type.id_eforms</code>.
   */
  @Override
  public void setIdEforms(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>data_type.id_eforms</code>.
   */
  @Override
  public String getIdEforms() {
    return (String) get(0);
  }

  /**
   * Setter for <code>data_type.regulation</code>.
   */
  @Override
  public void setRegulation(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>data_type.regulation</code>.
   */
  @Override
  public String getRegulation() {
    return (String) get(1);
  }

  /**
   * Setter for <code>data_type.text_area_possible</code>.
   */
  @Override
  public void setTextAreaPossible(Boolean value) {
    set(2, value);
  }

  /**
   * Getter for <code>data_type.text_area_possible</code>.
   */
  @Override
  public Boolean getTextAreaPossible() {
    return (Boolean) get(2);
  }

  /**
   * Setter for <code>data_type.description</code>.
   */
  @Override
  public void setDescription(String value) {
    set(3, value);
  }

  /**
   * Getter for <code>data_type.description</code>.
   */
  @Override
  public String getDescription() {
    return (String) get(3);
  }

  /**
   * Setter for <code>data_type.display_type_default</code>.
   */
  @Override
  public void setDisplayTypeDefault(String value) {
    set(4, value);
  }

  /**
   * Getter for <code>data_type.display_type_default</code>.
   */
  @Override
  public String getDisplayTypeDefault() {
    return (String) get(4);
  }

  /**
   * Setter for <code>data_type.display_type_1</code>.
   */
  @Override
  public void setDisplayType_1(String value) {
    set(5, value);
  }

  /**
   * Getter for <code>data_type.display_type_1</code>.
   */
  @Override
  public String getDisplayType_1() {
    return (String) get(5);
  }

  /**
   * Setter for <code>data_type.display_type_2</code>.
   */
  @Override
  public void setDisplayType_2(String value) {
    set(6, value);
  }

  /**
   * Getter for <code>data_type.display_type_2</code>.
   */
  @Override
  public String getDisplayType_2() {
    return (String) get(6);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row7<String, String, Boolean, String, String, String, String> fieldsRow() {
    return (Row7) super.fieldsRow();
  }

  @Override
  public Row7<String, String, Boolean, String, String, String, String> valuesRow() {
    return (Row7) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return DataType.DATA_TYPE.ID_EFORMS;
  }

  @Override
  public Field<String> field2() {
    return DataType.DATA_TYPE.REGULATION;
  }

  @Override
  public Field<Boolean> field3() {
    return DataType.DATA_TYPE.TEXT_AREA_POSSIBLE;
  }

  @Override
  public Field<String> field4() {
    return DataType.DATA_TYPE.DESCRIPTION;
  }

  @Override
  public Field<String> field5() {
    return DataType.DATA_TYPE.DISPLAY_TYPE_DEFAULT;
  }

  @Override
  public Field<String> field6() {
    return DataType.DATA_TYPE.DISPLAY_TYPE_1;
  }

  @Override
  public Field<String> field7() {
    return DataType.DATA_TYPE.DISPLAY_TYPE_2;
  }

  @Override
  public String component1() {
    return getIdEforms();
  }

  @Override
  public String component2() {
    return getRegulation();
  }

  @Override
  public Boolean component3() {
    return getTextAreaPossible();
  }

  @Override
  public String component4() {
    return getDescription();
  }

  @Override
  public String component5() {
    return getDisplayTypeDefault();
  }

  @Override
  public String component6() {
    return getDisplayType_1();
  }

  @Override
  public String component7() {
    return getDisplayType_2();
  }

  @Override
  public String value1() {
    return getIdEforms();
  }

  @Override
  public String value2() {
    return getRegulation();
  }

  @Override
  public Boolean value3() {
    return getTextAreaPossible();
  }

  @Override
  public String value4() {
    return getDescription();
  }

  @Override
  public String value5() {
    return getDisplayTypeDefault();
  }

  @Override
  public String value6() {
    return getDisplayType_1();
  }

  @Override
  public String value7() {
    return getDisplayType_2();
  }

  @Override
  public DataTypeRecord value1(String value) {
    setIdEforms(value);
    return this;
  }

  @Override
  public DataTypeRecord value2(String value) {
    setRegulation(value);
    return this;
  }

  @Override
  public DataTypeRecord value3(Boolean value) {
    setTextAreaPossible(value);
    return this;
  }

  @Override
  public DataTypeRecord value4(String value) {
    setDescription(value);
    return this;
  }

  @Override
  public DataTypeRecord value5(String value) {
    setDisplayTypeDefault(value);
    return this;
  }

  @Override
  public DataTypeRecord value6(String value) {
    setDisplayType_1(value);
    return this;
  }

  @Override
  public DataTypeRecord value7(String value) {
    setDisplayType_2(value);
    return this;
  }

  @Override
  public DataTypeRecord values(String value1, String value2, Boolean value3, String value4, String value5, String value6, String value7) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    value6(value6);
    value7(value7);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IDataType from) {
    setIdEforms(from.getIdEforms());
    setRegulation(from.getRegulation());
    setTextAreaPossible(from.getTextAreaPossible());
    setDescription(from.getDescription());
    setDisplayTypeDefault(from.getDisplayTypeDefault());
    setDisplayType_1(from.getDisplayType_1());
    setDisplayType_2(from.getDisplayType_2());
  }

  @Override
  public <E extends IDataType> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached DataTypeRecord
   */
  public DataTypeRecord() {
    super(DataType.DATA_TYPE);
  }

  /**
   * Create a detached, initialised DataTypeRecord
   */
  public DataTypeRecord(String idEforms, String regulation, Boolean textAreaPossible, String description, String displayTypeDefault, String displayType_1, String displayType_2) {
    super(DataType.DATA_TYPE);

    setIdEforms(idEforms);
    setRegulation(regulation);
    setTextAreaPossible(textAreaPossible);
    setDescription(description);
    setDisplayTypeDefault(displayTypeDefault);
    setDisplayType_1(displayType_1);
    setDisplayType_2(displayType_2);
  }
}
