/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.CodeListToCode;
import eu.europa.ec.mdd.generated.tables.interfaces.ICodeListToCode;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeListToCodeRecord extends UpdatableRecordImpl<CodeListToCodeRecord> implements Record4<String, String, String, Boolean>, ICodeListToCode {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>code_list_to_code.code_list_id</code>.
   */
  @Override
  public void setCodeListId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>code_list_to_code.code_list_id</code>.
   */
  @Override
  public String getCodeListId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>code_list_to_code.code_value</code>.
   */
  @Override
  public void setCodeValue(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>code_list_to_code.code_value</code>.
   */
  @Override
  public String getCodeValue() {
    return (String) get(1);
  }

  /**
   * Setter for <code>code_list_to_code.code_code_list_id</code>.
   */
  @Override
  public void setCodeCodeListId(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>code_list_to_code.code_code_list_id</code>.
   */
  @Override
  public String getCodeCodeListId() {
    return (String) get(2);
  }

  /**
   * Setter for <code>code_list_to_code.for_jooq_batch</code>.
   */
  @Override
  public void setForJooqBatch(Boolean value) {
    set(3, value);
  }

  /**
   * Getter for <code>code_list_to_code.for_jooq_batch</code>.
   */
  @Override
  public Boolean getForJooqBatch() {
    return (Boolean) get(3);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record3<String, String, String> key() {
    return (Record3) super.key();
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row4<String, String, String, Boolean> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<String, String, String, Boolean> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return CodeListToCode.CODE_LIST_TO_CODE.CODE_LIST_ID;
  }

  @Override
  public Field<String> field2() {
    return CodeListToCode.CODE_LIST_TO_CODE.CODE_VALUE;
  }

  @Override
  public Field<String> field3() {
    return CodeListToCode.CODE_LIST_TO_CODE.CODE_CODE_LIST_ID;
  }

  @Override
  public Field<Boolean> field4() {
    return CodeListToCode.CODE_LIST_TO_CODE.FOR_JOOQ_BATCH;
  }

  @Override
  public String component1() {
    return getCodeListId();
  }

  @Override
  public String component2() {
    return getCodeValue();
  }

  @Override
  public String component3() {
    return getCodeCodeListId();
  }

  @Override
  public Boolean component4() {
    return getForJooqBatch();
  }

  @Override
  public String value1() {
    return getCodeListId();
  }

  @Override
  public String value2() {
    return getCodeValue();
  }

  @Override
  public String value3() {
    return getCodeCodeListId();
  }

  @Override
  public Boolean value4() {
    return getForJooqBatch();
  }

  @Override
  public CodeListToCodeRecord value1(String value) {
    setCodeListId(value);
    return this;
  }

  @Override
  public CodeListToCodeRecord value2(String value) {
    setCodeValue(value);
    return this;
  }

  @Override
  public CodeListToCodeRecord value3(String value) {
    setCodeCodeListId(value);
    return this;
  }

  @Override
  public CodeListToCodeRecord value4(Boolean value) {
    setForJooqBatch(value);
    return this;
  }

  @Override
  public CodeListToCodeRecord values(String value1, String value2, String value3, Boolean value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICodeListToCode from) {
    setCodeListId(from.getCodeListId());
    setCodeValue(from.getCodeValue());
    setCodeCodeListId(from.getCodeCodeListId());
    setForJooqBatch(from.getForJooqBatch());
  }

  @Override
  public <E extends ICodeListToCode> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached CodeListToCodeRecord
   */
  public CodeListToCodeRecord() {
    super(CodeListToCode.CODE_LIST_TO_CODE);
  }

  /**
   * Create a detached, initialised CodeListToCodeRecord
   */
  public CodeListToCodeRecord(String codeListId, String codeValue, String codeCodeListId, Boolean forJooqBatch) {
    super(CodeListToCode.CODE_LIST_TO_CODE);

    setCodeListId(codeListId);
    setCodeValue(codeValue);
    setCodeCodeListId(codeCodeListId);
    setForJooqBatch(forJooqBatch);
  }
}
