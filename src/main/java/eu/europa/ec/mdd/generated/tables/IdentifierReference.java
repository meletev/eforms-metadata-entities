/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.IdentifierReferenceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdentifierReference extends TableImpl<IdentifierReferenceRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>identifier_reference</code>
   */
  public static final IdentifierReference IDENTIFIER_REFERENCE = new IdentifierReference();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<IdentifierReferenceRecord> getRecordType() {
    return IdentifierReferenceRecord.class;
  }

  /**
   * The column <code>identifier_reference.identifier_scheme_id</code>.
   */
  public final TableField<IdentifierReferenceRecord, String> IDENTIFIER_SCHEME_ID = createField(DSL.name("identifier_scheme_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>identifier_reference.field_id</code>.
   */
  public final TableField<IdentifierReferenceRecord, String> FIELD_ID = createField(DSL.name("field_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private IdentifierReference(Name alias, Table<IdentifierReferenceRecord> aliased) {
    this(alias, aliased, null);
  }

  private IdentifierReference(Name alias, Table<IdentifierReferenceRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>identifier_reference</code> table reference
   */
  public IdentifierReference(String alias) {
    this(DSL.name(alias), IDENTIFIER_REFERENCE);
  }

  /**
   * Create an aliased <code>identifier_reference</code> table reference
   */
  public IdentifierReference(Name alias) {
    this(alias, IDENTIFIER_REFERENCE);
  }

  /**
   * Create a <code>identifier_reference</code> table reference
   */
  public IdentifierReference() {
    this(DSL.name("identifier_reference"), null);
  }

  public <O extends Record> IdentifierReference(Table<O> child, ForeignKey<O, IdentifierReferenceRecord> key) {
    super(child, key, IDENTIFIER_REFERENCE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.IDENTIFIER_REFERENCE_FK_ID_REF_FIELD1_IDX);
  }

  @Override
  public UniqueKey<IdentifierReferenceRecord> getPrimaryKey() {
    return Keys.KEY_IDENTIFIER_REFERENCE_PRIMARY;
  }

  @Override
  public List<UniqueKey<IdentifierReferenceRecord>> getKeys() {
    return Arrays.<UniqueKey<IdentifierReferenceRecord>>asList(Keys.KEY_IDENTIFIER_REFERENCE_PRIMARY);
  }

  @Override
  public List<ForeignKey<IdentifierReferenceRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<IdentifierReferenceRecord, ?>>asList(Keys.ID_REF_ID_SCHEME_ID_FK, Keys.FK_ID_REF_FIELD1);
  }

  private transient IdentifierScheme _identifierScheme;
  private transient eu.europa.ec.mdd.generated.tables.Field _field;

  public IdentifierScheme identifierScheme() {
    if (_identifierScheme == null)
      _identifierScheme = new IdentifierScheme(this, Keys.ID_REF_ID_SCHEME_ID_FK);

    return _identifierScheme;
  }

  public eu.europa.ec.mdd.generated.tables.Field field() {
    if (_field == null)
      _field = new eu.europa.ec.mdd.generated.tables.Field(this, Keys.FK_ID_REF_FIELD1);

    return _field;
  }

  @Override
  public IdentifierReference as(String alias) {
    return new IdentifierReference(DSL.name(alias), this);
  }

  @Override
  public IdentifierReference as(Name alias) {
    return new IdentifierReference(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public IdentifierReference rename(String name) {
    return new IdentifierReference(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public IdentifierReference rename(Name name) {
    return new IdentifierReference(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
