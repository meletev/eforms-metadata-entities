/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.TedFormRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Standard forms in old TED XML schemas
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TedForm extends TableImpl<TedFormRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>ted_form</code>
   */
  public static final TedForm TED_FORM = new TedForm();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<TedFormRecord> getRecordType() {
    return TedFormRecord.class;
  }

  /**
   * The column <code>ted_form.id</code>.
   */
  public final TableField<TedFormRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(10).nullable(false), this, "");

  /**
   * The column <code>ted_form.name</code>.
   */
  public final TableField<TedFormRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private TedForm(Name alias, Table<TedFormRecord> aliased) {
    this(alias, aliased, null);
  }

  private TedForm(Name alias, Table<TedFormRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment("Standard forms in old TED XML schemas"), TableOptions.table());
  }

  /**
   * Create an aliased <code>ted_form</code> table reference
   */
  public TedForm(String alias) {
    this(DSL.name(alias), TED_FORM);
  }

  /**
   * Create an aliased <code>ted_form</code> table reference
   */
  public TedForm(Name alias) {
    this(alias, TED_FORM);
  }

  /**
   * Create a <code>ted_form</code> table reference
   */
  public TedForm() {
    this(DSL.name("ted_form"), null);
  }

  public <O extends Record> TedForm(Table<O> child, ForeignKey<O, TedFormRecord> key) {
    super(child, key, TED_FORM);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<TedFormRecord> getPrimaryKey() {
    return Keys.KEY_TED_FORM_PRIMARY;
  }

  @Override
  public List<UniqueKey<TedFormRecord>> getKeys() {
    return Arrays.<UniqueKey<TedFormRecord>>asList(Keys.KEY_TED_FORM_PRIMARY);
  }

  @Override
  public TedForm as(String alias) {
    return new TedForm(DSL.name(alias), this);
  }

  @Override
  public TedForm as(Name alias) {
    return new TedForm(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public TedForm rename(String name) {
    return new TedForm(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public TedForm rename(Name name) {
    return new TedForm(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
