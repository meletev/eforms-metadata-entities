/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.CodeListToCodeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeListToCode extends TableImpl<CodeListToCodeRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>code_list_to_code</code>
   */
  public static final CodeListToCode CODE_LIST_TO_CODE = new CodeListToCode();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<CodeListToCodeRecord> getRecordType() {
    return CodeListToCodeRecord.class;
  }

  /**
   * The column <code>code_list_to_code.code_list_id</code>.
   */
  public final TableField<CodeListToCodeRecord, String> CODE_LIST_ID = createField(DSL.name("code_list_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>code_list_to_code.code_value</code>.
   */
  public final TableField<CodeListToCodeRecord, String> CODE_VALUE = createField(DSL.name("code_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>code_list_to_code.code_code_list_id</code>.
   */
  public final TableField<CodeListToCodeRecord, String> CODE_CODE_LIST_ID = createField(DSL.name("code_code_list_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>code_list_to_code.for_jooq_batch</code>.
   */
  public final TableField<CodeListToCodeRecord, Boolean> FOR_JOOQ_BATCH = createField(DSL.name("for_jooq_batch"), SQLDataType.BOOLEAN, this, "");

  private CodeListToCode(Name alias, Table<CodeListToCodeRecord> aliased) {
    this(alias, aliased, null);
  }

  private CodeListToCode(Name alias, Table<CodeListToCodeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>code_list_to_code</code> table reference
   */
  public CodeListToCode(String alias) {
    this(DSL.name(alias), CODE_LIST_TO_CODE);
  }

  /**
   * Create an aliased <code>code_list_to_code</code> table reference
   */
  public CodeListToCode(Name alias) {
    this(alias, CODE_LIST_TO_CODE);
  }

  /**
   * Create a <code>code_list_to_code</code> table reference
   */
  public CodeListToCode() {
    this(DSL.name("code_list_to_code"), null);
  }

  public <O extends Record> CodeListToCode(Table<O> child, ForeignKey<O, CodeListToCodeRecord> key) {
    super(child, key, CODE_LIST_TO_CODE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.CODE_LIST_TO_CODE_CODE_LIST_TO_CODE_IBFK_2);
  }

  @Override
  public UniqueKey<CodeListToCodeRecord> getPrimaryKey() {
    return Keys.KEY_CODE_LIST_TO_CODE_PRIMARY;
  }

  @Override
  public List<UniqueKey<CodeListToCodeRecord>> getKeys() {
    return Arrays.<UniqueKey<CodeListToCodeRecord>>asList(Keys.KEY_CODE_LIST_TO_CODE_PRIMARY);
  }

  @Override
  public CodeListToCode as(String alias) {
    return new CodeListToCode(DSL.name(alias), this);
  }

  @Override
  public CodeListToCode as(Name alias) {
    return new CodeListToCode(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public CodeListToCode rename(String name) {
    return new CodeListToCode(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public CodeListToCode rename(Name name) {
    return new CodeListToCode(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<String, String, String, Boolean> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
