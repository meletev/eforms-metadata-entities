/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.enums.CountDraftBusinessRulesType;
import eu.europa.ec.mdd.generated.tables.records.CountDraftBusinessRulesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountDraftBusinessRules extends TableImpl<CountDraftBusinessRulesRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>count_draft_business_rules</code>
   */
  public static final CountDraftBusinessRules COUNT_DRAFT_BUSINESS_RULES = new CountDraftBusinessRules();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<CountDraftBusinessRulesRecord> getRecordType() {
    return CountDraftBusinessRulesRecord.class;
  }

  /**
   * The column <code>count_draft_business_rules.type</code>.
   */
  public final TableField<CountDraftBusinessRulesRecord, CountDraftBusinessRulesType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(18).nullable(false).asEnumDataType(eu.europa.ec.mdd.generated.enums.CountDraftBusinessRulesType.class), this, "");

  /**
   * The column <code>count_draft_business_rules.draft</code>.
   */
  public final TableField<CountDraftBusinessRulesRecord, Long> DRAFT = createField(DSL.name("draft"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

  /**
   * The column <code>count_draft_business_rules.active</code>.
   */
  public final TableField<CountDraftBusinessRulesRecord, Long> ACTIVE = createField(DSL.name("active"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

  /**
   * The column <code>count_draft_business_rules.total</code>.
   */
  public final TableField<CountDraftBusinessRulesRecord, Long> TOTAL = createField(DSL.name("total"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

  private CountDraftBusinessRules(Name alias, Table<CountDraftBusinessRulesRecord> aliased) {
    this(alias, aliased, null);
  }

  private CountDraftBusinessRules(Name alias, Table<CountDraftBusinessRulesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `count_draft_business_rules` as select `TEDEFO_DEV_MDD_EM`.`business_rule`.`type` AS `type`,count((case when (`TEDEFO_DEV_MDD_EM`.`business_rule`.`draft` <> 0) then 1 else NULL end)) AS `draft`,count((case when (`TEDEFO_DEV_MDD_EM`.`business_rule`.`draft` = 0) then 1 else NULL end)) AS `active`,count(0) AS `total` from `TEDEFO_DEV_MDD_EM`.`business_rule` group by `TEDEFO_DEV_MDD_EM`.`business_rule`.`type`"));
  }

  /**
   * Create an aliased <code>count_draft_business_rules</code> table reference
   */
  public CountDraftBusinessRules(String alias) {
    this(DSL.name(alias), COUNT_DRAFT_BUSINESS_RULES);
  }

  /**
   * Create an aliased <code>count_draft_business_rules</code> table reference
   */
  public CountDraftBusinessRules(Name alias) {
    this(alias, COUNT_DRAFT_BUSINESS_RULES);
  }

  /**
   * Create a <code>count_draft_business_rules</code> table reference
   */
  public CountDraftBusinessRules() {
    this(DSL.name("count_draft_business_rules"), null);
  }

  public <O extends Record> CountDraftBusinessRules(Table<O> child, ForeignKey<O, CountDraftBusinessRulesRecord> key) {
    super(child, key, COUNT_DRAFT_BUSINESS_RULES);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public CountDraftBusinessRules as(String alias) {
    return new CountDraftBusinessRules(DSL.name(alias), this);
  }

  @Override
  public CountDraftBusinessRules as(Name alias) {
    return new CountDraftBusinessRules(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public CountDraftBusinessRules rename(String name) {
    return new CountDraftBusinessRules(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public CountDraftBusinessRules rename(Name name) {
    return new CountDraftBusinessRules(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<CountDraftBusinessRulesType, Long, Long, Long> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
