/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated;


import eu.europa.ec.mdd.generated.routines.CountBusinessRuleSourcesByActualImplementationStatus;
import eu.europa.ec.mdd.generated.routines.CountBusinessRuleSourcesBySourceAndImplementationStatus;
import eu.europa.ec.mdd.generated.routines.CountBusinessRuleSourcesBySourceAndStatus;
import eu.europa.ec.mdd.generated.routines.CountBusinessRuleSourcesByStatus;
import eu.europa.ec.mdd.generated.routines.CountBusinessRulesByFieldAndNotice;
import eu.europa.ec.mdd.generated.routines.CountBusinessRulesByFieldAndStatus;
import eu.europa.ec.mdd.generated.routines.CountBusinessRulesByFieldAndType;
import eu.europa.ec.mdd.generated.routines.CountBusinessRulesByNoticeAndStatus;
import eu.europa.ec.mdd.generated.routines.CountBusinessRulesByNoticeAndType;
import eu.europa.ec.mdd.generated.routines.CountBusinessRulesByTypeAndStatus;
import eu.europa.ec.mdd.generated.routines.CountConditionsUsedByMultipleTypesOfRules;
import eu.europa.ec.mdd.generated.routines.CountRepeatableParentsOfNode;
import eu.europa.ec.mdd.generated.routines.GetFirstRepeatableParentOfField;
import eu.europa.ec.mdd.generated.routines.GetFirstRepeatableParentOfNode;
import eu.europa.ec.mdd.generated.routines.GetXpathAbsolute;
import eu.europa.ec.mdd.generated.routines.IsAncestor;
import eu.europa.ec.mdd.generated.routines.IsFieldRepeatable;
import eu.europa.ec.mdd.generated.routines.IsNodeRepeatable;
import eu.europa.ec.mdd.generated.routines.SplitStr;

import org.jooq.Configuration;
import org.jooq.Field;


/**
 * Convenience access to all stored procedures and functions in the default 
 * schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

  /**
   * Call <code>count_business_rule_sources_by_actual_implementation_status</code>
   */
  public static void countBusinessRuleSourcesByActualImplementationStatus(
      Configuration configuration
  ) {
    CountBusinessRuleSourcesByActualImplementationStatus p = new CountBusinessRuleSourcesByActualImplementationStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rule_sources_by_source_and_implementation_status</code>
   */
  public static void countBusinessRuleSourcesBySourceAndImplementationStatus(
      Configuration configuration
  ) {
    CountBusinessRuleSourcesBySourceAndImplementationStatus p = new CountBusinessRuleSourcesBySourceAndImplementationStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rule_sources_by_source_and_status</code>
   */
  public static void countBusinessRuleSourcesBySourceAndStatus(
      Configuration configuration
  ) {
    CountBusinessRuleSourcesBySourceAndStatus p = new CountBusinessRuleSourcesBySourceAndStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rule_sources_by_status</code>
   */
  public static void countBusinessRuleSourcesByStatus(
      Configuration configuration
  ) {
    CountBusinessRuleSourcesByStatus p = new CountBusinessRuleSourcesByStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rules_by_field_and_notice</code>
   */
  public static void countBusinessRulesByFieldAndNotice(
      Configuration configuration
  ) {
    CountBusinessRulesByFieldAndNotice p = new CountBusinessRulesByFieldAndNotice();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rules_by_field_and_status</code>
   */
  public static void countBusinessRulesByFieldAndStatus(
      Configuration configuration
  ) {
    CountBusinessRulesByFieldAndStatus p = new CountBusinessRulesByFieldAndStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rules_by_field_and_type</code>
   */
  public static void countBusinessRulesByFieldAndType(
      Configuration configuration
  ) {
    CountBusinessRulesByFieldAndType p = new CountBusinessRulesByFieldAndType();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rules_by_notice_and_status</code>
   */
  public static void countBusinessRulesByNoticeAndStatus(
      Configuration configuration
  ) {
    CountBusinessRulesByNoticeAndStatus p = new CountBusinessRulesByNoticeAndStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rules_by_notice_and_type</code>
   */
  public static void countBusinessRulesByNoticeAndType(
      Configuration configuration
  ) {
    CountBusinessRulesByNoticeAndType p = new CountBusinessRulesByNoticeAndType();

    p.execute(configuration);
  }

  /**
   * Call <code>count_business_rules_by_type_and_status</code>
   */
  public static void countBusinessRulesByTypeAndStatus(
      Configuration configuration
  ) {
    CountBusinessRulesByTypeAndStatus p = new CountBusinessRulesByTypeAndStatus();

    p.execute(configuration);
  }

  /**
   * Call <code>count_conditions_used_by_multiple_types_of_rules</code>
   */
  public static void countConditionsUsedByMultipleTypesOfRules(
      Configuration configuration
  ) {
    CountConditionsUsedByMultipleTypesOfRules p = new CountConditionsUsedByMultipleTypesOfRules();

    p.execute(configuration);
  }

  /**
   * Call <code>count_repeatable_parents_of_node</code>
   */
  public static Integer countRepeatableParentsOfNode(
      Configuration configuration
    , String nodeId
  ) {
    CountRepeatableParentsOfNode f = new CountRepeatableParentsOfNode();
    f.setNodeId(nodeId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>count_repeatable_parents_of_node</code> as a field.
   */
  public static Field<Integer> countRepeatableParentsOfNode(
      String nodeId
  ) {
    CountRepeatableParentsOfNode f = new CountRepeatableParentsOfNode();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Get <code>count_repeatable_parents_of_node</code> as a field.
   */
  public static Field<Integer> countRepeatableParentsOfNode(
      Field<String> nodeId
  ) {
    CountRepeatableParentsOfNode f = new CountRepeatableParentsOfNode();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Call <code>get_first_repeatable_parent_of_field</code>
   */
  public static String getFirstRepeatableParentOfField(
      Configuration configuration
    , String fieldId
  ) {
    GetFirstRepeatableParentOfField f = new GetFirstRepeatableParentOfField();
    f.setFieldId(fieldId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>get_first_repeatable_parent_of_field</code> as a field.
   */
  public static Field<String> getFirstRepeatableParentOfField(
      String fieldId
  ) {
    GetFirstRepeatableParentOfField f = new GetFirstRepeatableParentOfField();
    f.setFieldId(fieldId);

    return f.asField();
  }

  /**
   * Get <code>get_first_repeatable_parent_of_field</code> as a field.
   */
  public static Field<String> getFirstRepeatableParentOfField(
      Field<String> fieldId
  ) {
    GetFirstRepeatableParentOfField f = new GetFirstRepeatableParentOfField();
    f.setFieldId(fieldId);

    return f.asField();
  }

  /**
   * Call <code>get_first_repeatable_parent_of_node</code>
   */
  public static String getFirstRepeatableParentOfNode(
      Configuration configuration
    , String nodeId
  ) {
    GetFirstRepeatableParentOfNode f = new GetFirstRepeatableParentOfNode();
    f.setNodeId(nodeId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>get_first_repeatable_parent_of_node</code> as a field.
   */
  public static Field<String> getFirstRepeatableParentOfNode(
      String nodeId
  ) {
    GetFirstRepeatableParentOfNode f = new GetFirstRepeatableParentOfNode();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Get <code>get_first_repeatable_parent_of_node</code> as a field.
   */
  public static Field<String> getFirstRepeatableParentOfNode(
      Field<String> nodeId
  ) {
    GetFirstRepeatableParentOfNode f = new GetFirstRepeatableParentOfNode();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Call <code>get_xpath_absolute</code>
   */
  public static String getXpathAbsolute(
      Configuration configuration
    , String nodeId
  ) {
    GetXpathAbsolute f = new GetXpathAbsolute();
    f.setNodeId(nodeId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>get_xpath_absolute</code> as a field.
   */
  public static Field<String> getXpathAbsolute(
      String nodeId
  ) {
    GetXpathAbsolute f = new GetXpathAbsolute();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Get <code>get_xpath_absolute</code> as a field.
   */
  public static Field<String> getXpathAbsolute(
      Field<String> nodeId
  ) {
    GetXpathAbsolute f = new GetXpathAbsolute();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Call <code>is_ancestor</code>
   */
  public static Byte isAncestor(
      Configuration configuration
    , String nodeId
    , String ancestorId
  ) {
    IsAncestor f = new IsAncestor();
    f.setNodeId(nodeId);
    f.setAncestorId(ancestorId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>is_ancestor</code> as a field.
   */
  public static Field<Byte> isAncestor(
      String nodeId
    , String ancestorId
  ) {
    IsAncestor f = new IsAncestor();
    f.setNodeId(nodeId);
    f.setAncestorId(ancestorId);

    return f.asField();
  }

  /**
   * Get <code>is_ancestor</code> as a field.
   */
  public static Field<Byte> isAncestor(
      Field<String> nodeId
    , Field<String> ancestorId
  ) {
    IsAncestor f = new IsAncestor();
    f.setNodeId(nodeId);
    f.setAncestorId(ancestorId);

    return f.asField();
  }

  /**
   * Call <code>is_field_repeatable</code>
   */
  public static Byte isFieldRepeatable(
      Configuration configuration
    , String fieldId
  ) {
    IsFieldRepeatable f = new IsFieldRepeatable();
    f.setFieldId(fieldId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>is_field_repeatable</code> as a field.
   */
  public static Field<Byte> isFieldRepeatable(
      String fieldId
  ) {
    IsFieldRepeatable f = new IsFieldRepeatable();
    f.setFieldId(fieldId);

    return f.asField();
  }

  /**
   * Get <code>is_field_repeatable</code> as a field.
   */
  public static Field<Byte> isFieldRepeatable(
      Field<String> fieldId
  ) {
    IsFieldRepeatable f = new IsFieldRepeatable();
    f.setFieldId(fieldId);

    return f.asField();
  }

  /**
   * Call <code>is_node_repeatable</code>
   */
  public static Byte isNodeRepeatable(
      Configuration configuration
    , String nodeId
  ) {
    IsNodeRepeatable f = new IsNodeRepeatable();
    f.setNodeId(nodeId);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>is_node_repeatable</code> as a field.
   */
  public static Field<Byte> isNodeRepeatable(
      String nodeId
  ) {
    IsNodeRepeatable f = new IsNodeRepeatable();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Get <code>is_node_repeatable</code> as a field.
   */
  public static Field<Byte> isNodeRepeatable(
      Field<String> nodeId
  ) {
    IsNodeRepeatable f = new IsNodeRepeatable();
    f.setNodeId(nodeId);

    return f.asField();
  }

  /**
   * Call <code>SPLIT_STR</code>
   */
  public static String splitStr(
      Configuration configuration
    , String x
    , String delim
    , Integer pos
  ) {
    SplitStr f = new SplitStr();
    f.setX(x);
    f.setDelim(delim);
    f.setPos(pos);

    f.execute(configuration);
    return f.getReturnValue();
  }

  /**
   * Get <code>SPLIT_STR</code> as a field.
   */
  public static Field<String> splitStr(
      String x
    , String delim
    , Integer pos
  ) {
    SplitStr f = new SplitStr();
    f.setX(x);
    f.setDelim(delim);
    f.setPos(pos);

    return f.asField();
  }

  /**
   * Get <code>SPLIT_STR</code> as a field.
   */
  public static Field<String> splitStr(
      Field<String> x
    , Field<String> delim
    , Field<Integer> pos
  ) {
    SplitStr f = new SplitStr();
    f.setX(x);
    f.setDelim(delim);
    f.setPos(pos);

    return f.asField();
  }
}
