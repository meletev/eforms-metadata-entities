/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.Pattern;
import eu.europa.ec.mdd.generated.tables.interfaces.IPattern;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatternRecord extends UpdatableRecordImpl<PatternRecord> implements Record2<String, String>, IPattern {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>pattern.id</code>.
   */
  @Override
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>pattern.id</code>.
   */
  @Override
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>pattern.value</code>.
   */
  @Override
  public void setValue(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>pattern.value</code>.
   */
  @Override
  public String getValue() {
    return (String) get(1);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record2 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }

  @Override
  public Row2<String, String> valuesRow() {
    return (Row2) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Pattern.PATTERN.ID;
  }

  @Override
  public Field<String> field2() {
    return Pattern.PATTERN.VALUE;
  }

  @Override
  public String component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getValue();
  }

  @Override
  public String value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getValue();
  }

  @Override
  public PatternRecord value1(String value) {
    setId(value);
    return this;
  }

  @Override
  public PatternRecord value2(String value) {
    setValue(value);
    return this;
  }

  @Override
  public PatternRecord values(String value1, String value2) {
    value1(value1);
    value2(value2);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IPattern from) {
    setId(from.getId());
    setValue(from.getValue());
  }

  @Override
  public <E extends IPattern> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached PatternRecord
   */
  public PatternRecord() {
    super(Pattern.PATTERN);
  }

  /**
   * Create a detached, initialised PatternRecord
   */
  public PatternRecord(String id, String value) {
    super(Pattern.PATTERN);

    setId(id);
    setValue(value);
  }
}
