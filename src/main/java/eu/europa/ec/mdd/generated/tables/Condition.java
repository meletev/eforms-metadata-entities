/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.ConditionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Condition extends TableImpl<ConditionRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>condition</code>
   */
  public static final Condition CONDITION = new Condition();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ConditionRecord> getRecordType() {
    return ConditionRecord.class;
  }

  /**
   * The column <code>condition.id</code>.
   */
  public final TableField<ConditionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

  /**
   * The column <code>condition.description</code>.
   */
  public final TableField<ConditionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4096).nullable(false), this, "");

  /**
   * The column <code>condition.expression_efx</code>.
   */
  public final TableField<ConditionRecord, String> EXPRESSION_EFX = createField(DSL.name("expression_efx"), SQLDataType.VARCHAR(4096).nullable(false), this, "");

  private Condition(Name alias, Table<ConditionRecord> aliased) {
    this(alias, aliased, null);
  }

  private Condition(Name alias, Table<ConditionRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>condition</code> table reference
   */
  public Condition(String alias) {
    this(DSL.name(alias), CONDITION);
  }

  /**
   * Create an aliased <code>condition</code> table reference
   */
  public Condition(Name alias) {
    this(alias, CONDITION);
  }

  /**
   * Create a <code>condition</code> table reference
   */
  public Condition() {
    this(DSL.name("condition"), null);
  }

  public <O extends Record> Condition(Table<O> child, ForeignKey<O, ConditionRecord> key) {
    super(child, key, CONDITION);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public Identity<ConditionRecord, Integer> getIdentity() {
    return (Identity<ConditionRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<ConditionRecord> getPrimaryKey() {
    return Keys.KEY_CONDITION_PRIMARY;
  }

  @Override
  public List<UniqueKey<ConditionRecord>> getKeys() {
    return Arrays.<UniqueKey<ConditionRecord>>asList(Keys.KEY_CONDITION_PRIMARY);
  }

  @Override
  public Condition as(String alias) {
    return new Condition(DSL.name(alias), this);
  }

  @Override
  public Condition as(Name alias) {
    return new Condition(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Condition rename(String name) {
    return new Condition(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Condition rename(Name name) {
    return new Condition(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<Integer, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
