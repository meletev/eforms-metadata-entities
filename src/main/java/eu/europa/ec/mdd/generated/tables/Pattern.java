/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.PatternRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pattern extends TableImpl<PatternRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>pattern</code>
   */
  public static final Pattern PATTERN = new Pattern();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PatternRecord> getRecordType() {
    return PatternRecord.class;
  }

  /**
   * The column <code>pattern.id</code>.
   */
  public final TableField<PatternRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>pattern.value</code>.
   */
  public final TableField<PatternRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(1000), this, "");

  private Pattern(Name alias, Table<PatternRecord> aliased) {
    this(alias, aliased, null);
  }

  private Pattern(Name alias, Table<PatternRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>pattern</code> table reference
   */
  public Pattern(String alias) {
    this(DSL.name(alias), PATTERN);
  }

  /**
   * Create an aliased <code>pattern</code> table reference
   */
  public Pattern(Name alias) {
    this(alias, PATTERN);
  }

  /**
   * Create a <code>pattern</code> table reference
   */
  public Pattern() {
    this(DSL.name("pattern"), null);
  }

  public <O extends Record> Pattern(Table<O> child, ForeignKey<O, PatternRecord> key) {
    super(child, key, PATTERN);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<PatternRecord> getPrimaryKey() {
    return Keys.KEY_PATTERN_PRIMARY;
  }

  @Override
  public List<UniqueKey<PatternRecord>> getKeys() {
    return Arrays.<UniqueKey<PatternRecord>>asList(Keys.KEY_PATTERN_PRIMARY);
  }

  @Override
  public Pattern as(String alias) {
    return new Pattern(DSL.name(alias), this);
  }

  @Override
  public Pattern as(Name alias) {
    return new Pattern(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Pattern rename(String name) {
    return new Pattern(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Pattern rename(Name name) {
    return new Pattern(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
