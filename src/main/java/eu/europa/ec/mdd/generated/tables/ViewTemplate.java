/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.ViewTemplateRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTemplate extends TableImpl<ViewTemplateRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>view_template</code>
   */
  public static final ViewTemplate VIEW_TEMPLATE = new ViewTemplate();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ViewTemplateRecord> getRecordType() {
    return ViewTemplateRecord.class;
  }

  /**
   * The column <code>view_template.id</code>.
   */
  public final TableField<ViewTemplateRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view_template.template</code>. Contains EFX, starting with the context
   */
  public final TableField<ViewTemplateRecord, String> TEMPLATE = createField(DSL.name("template"), SQLDataType.VARCHAR(10000).nullable(false), this, "Contains EFX, starting with the context");

  /**
   * The column <code>view_template.draft</code>.
   */
  public final TableField<ViewTemplateRecord, Boolean> DRAFT = createField(DSL.name("draft"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "");

  /**
   * The column <code>view_template.draft_reason</code>.
   */
  public final TableField<ViewTemplateRecord, String> DRAFT_REASON = createField(DSL.name("draft_reason"), SQLDataType.VARCHAR(1024), this, "");

  /**
   * The column <code>view_template.db_modified</code>.
   */
  public final TableField<ViewTemplateRecord, LocalDateTime> DB_MODIFIED = createField(DSL.name("db_modified"), SQLDataType.LOCALDATETIME(0), this, "");

  /**
   * The column <code>view_template.db_modified_by</code>.
   */
  public final TableField<ViewTemplateRecord, String> DB_MODIFIED_BY = createField(DSL.name("db_modified_by"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>view_template.db_created</code>. Set during import
   */
  public final TableField<ViewTemplateRecord, LocalDateTime> DB_CREATED = createField(DSL.name("db_created"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Set during import");

  /**
   * The column <code>view_template.db_imported</code>. Set during import
   */
  public final TableField<ViewTemplateRecord, LocalDateTime> DB_IMPORTED = createField(DSL.name("db_imported"), SQLDataType.LOCALDATETIME(0), this, "Set during import");

  private ViewTemplate(Name alias, Table<ViewTemplateRecord> aliased) {
    this(alias, aliased, null);
  }

  private ViewTemplate(Name alias, Table<ViewTemplateRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>view_template</code> table reference
   */
  public ViewTemplate(String alias) {
    this(DSL.name(alias), VIEW_TEMPLATE);
  }

  /**
   * Create an aliased <code>view_template</code> table reference
   */
  public ViewTemplate(Name alias) {
    this(alias, VIEW_TEMPLATE);
  }

  /**
   * Create a <code>view_template</code> table reference
   */
  public ViewTemplate() {
    this(DSL.name("view_template"), null);
  }

  public <O extends Record> ViewTemplate(Table<O> child, ForeignKey<O, ViewTemplateRecord> key) {
    super(child, key, VIEW_TEMPLATE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<ViewTemplateRecord> getPrimaryKey() {
    return Keys.KEY_VIEW_TEMPLATE_PRIMARY;
  }

  @Override
  public List<UniqueKey<ViewTemplateRecord>> getKeys() {
    return Arrays.<UniqueKey<ViewTemplateRecord>>asList(Keys.KEY_VIEW_TEMPLATE_PRIMARY);
  }

  @Override
  public ViewTemplate as(String alias) {
    return new ViewTemplate(DSL.name(alias), this);
  }

  @Override
  public ViewTemplate as(Name alias) {
    return new ViewTemplate(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ViewTemplate rename(String name) {
    return new ViewTemplate(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ViewTemplate rename(Name name) {
    return new ViewTemplate(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, Boolean, String, LocalDateTime, String, LocalDateTime, LocalDateTime> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
