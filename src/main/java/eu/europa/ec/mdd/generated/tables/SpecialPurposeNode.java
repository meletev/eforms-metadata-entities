/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.SpecialPurposeNodeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpecialPurposeNode extends TableImpl<SpecialPurposeNodeRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>special_purpose_node</code>
   */
  public static final SpecialPurposeNode SPECIAL_PURPOSE_NODE = new SpecialPurposeNode();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<SpecialPurposeNodeRecord> getRecordType() {
    return SpecialPurposeNodeRecord.class;
  }

  /**
   * The column <code>special_purpose_node.id</code>.
   */
  public final TableField<SpecialPurposeNodeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>special_purpose_node.description</code>.
   */
  public final TableField<SpecialPurposeNodeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>special_purpose_node.node_id</code>.
   */
  public final TableField<SpecialPurposeNodeRecord, String> NODE_ID = createField(DSL.name("node_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private SpecialPurposeNode(Name alias, Table<SpecialPurposeNodeRecord> aliased) {
    this(alias, aliased, null);
  }

  private SpecialPurposeNode(Name alias, Table<SpecialPurposeNodeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>special_purpose_node</code> table reference
   */
  public SpecialPurposeNode(String alias) {
    this(DSL.name(alias), SPECIAL_PURPOSE_NODE);
  }

  /**
   * Create an aliased <code>special_purpose_node</code> table reference
   */
  public SpecialPurposeNode(Name alias) {
    this(alias, SPECIAL_PURPOSE_NODE);
  }

  /**
   * Create a <code>special_purpose_node</code> table reference
   */
  public SpecialPurposeNode() {
    this(DSL.name("special_purpose_node"), null);
  }

  public <O extends Record> SpecialPurposeNode(Table<O> child, ForeignKey<O, SpecialPurposeNodeRecord> key) {
    super(child, key, SPECIAL_PURPOSE_NODE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<SpecialPurposeNodeRecord> getPrimaryKey() {
    return Keys.KEY_SPECIAL_PURPOSE_NODE_PRIMARY;
  }

  @Override
  public List<UniqueKey<SpecialPurposeNodeRecord>> getKeys() {
    return Arrays.<UniqueKey<SpecialPurposeNodeRecord>>asList(Keys.KEY_SPECIAL_PURPOSE_NODE_PRIMARY, Keys.KEY_SPECIAL_PURPOSE_NODE_DESCRIPTION, Keys.KEY_SPECIAL_PURPOSE_NODE_NODE_ID);
  }

  @Override
  public List<ForeignKey<SpecialPurposeNodeRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<SpecialPurposeNodeRecord, ?>>asList(Keys.SPECIAL_PURPOSE_NODE_ID_FK);
  }

  private transient Node _node;

  public Node node() {
    if (_node == null)
      _node = new Node(this, Keys.SPECIAL_PURPOSE_NODE_ID_FK);

    return _node;
  }

  @Override
  public SpecialPurposeNode as(String alias) {
    return new SpecialPurposeNode(DSL.name(alias), this);
  }

  @Override
  public SpecialPurposeNode as(Name alias) {
    return new SpecialPurposeNode(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public SpecialPurposeNode rename(String name) {
    return new SpecialPurposeNode(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public SpecialPurposeNode rename(Name name) {
    return new SpecialPurposeNode(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
