/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.enums.NoticeFormType;
import eu.europa.ec.mdd.generated.enums.NoticeLegalBasis;
import eu.europa.ec.mdd.generated.enums.NoticeNoticeType;
import eu.europa.ec.mdd.generated.tables.records.NoticeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notice extends TableImpl<NoticeRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>notice</code>
   */
  public static final Notice NOTICE = new Notice();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<NoticeRecord> getRecordType() {
    return NoticeRecord.class;
  }

  /**
   * The column <code>notice.id</code>.
   */
  public final TableField<NoticeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>notice.legal_basis</code>.
   */
  public final TableField<NoticeRecord, NoticeLegalBasis> LEGAL_BASIS = createField(DSL.name("legal_basis"), SQLDataType.VARCHAR(10).asEnumDataType(eu.europa.ec.mdd.generated.enums.NoticeLegalBasis.class), this, "");

  /**
   * The column <code>notice.form_type</code>.
   */
  public final TableField<NoticeRecord, NoticeFormType> FORM_TYPE = createField(DSL.name("form_type"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(eu.europa.ec.mdd.generated.enums.NoticeFormType.class), this, "");

  /**
   * The column <code>notice.notice_type</code>.
   */
  public final TableField<NoticeRecord, NoticeNoticeType> NOTICE_TYPE = createField(DSL.name("notice_type"), SQLDataType.VARCHAR(16).nullable(false).asEnumDataType(eu.europa.ec.mdd.generated.enums.NoticeNoticeType.class), this, "");

  /**
   * The column <code>notice.document_type_id</code>.
   */
  public final TableField<NoticeRecord, String> DOCUMENT_TYPE_ID = createField(DSL.name("document_type_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>notice.description</code>.
   */
  public final TableField<NoticeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private Notice(Name alias, Table<NoticeRecord> aliased) {
    this(alias, aliased, null);
  }

  private Notice(Name alias, Table<NoticeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>notice</code> table reference
   */
  public Notice(String alias) {
    this(DSL.name(alias), NOTICE);
  }

  /**
   * Create an aliased <code>notice</code> table reference
   */
  public Notice(Name alias) {
    this(alias, NOTICE);
  }

  /**
   * Create a <code>notice</code> table reference
   */
  public Notice() {
    this(DSL.name("notice"), null);
  }

  public <O extends Record> Notice(Table<O> child, ForeignKey<O, NoticeRecord> key) {
    super(child, key, NOTICE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.NOTICE_DOCUMENT_TYPE_ID);
  }

  @Override
  public UniqueKey<NoticeRecord> getPrimaryKey() {
    return Keys.KEY_NOTICE_PRIMARY;
  }

  @Override
  public List<UniqueKey<NoticeRecord>> getKeys() {
    return Arrays.<UniqueKey<NoticeRecord>>asList(Keys.KEY_NOTICE_PRIMARY);
  }

  @Override
  public List<ForeignKey<NoticeRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<NoticeRecord, ?>>asList(Keys.NOTICE_IBFK_1);
  }

  private transient DocumentType _documentType;

  public DocumentType documentType() {
    if (_documentType == null)
      _documentType = new DocumentType(this, Keys.NOTICE_IBFK_1);

    return _documentType;
  }

  @Override
  public Notice as(String alias) {
    return new Notice(DSL.name(alias), this);
  }

  @Override
  public Notice as(Name alias) {
    return new Notice(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Notice rename(String name) {
    return new Notice(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Notice rename(Name name) {
    return new Notice(name, null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<String, NoticeLegalBasis, NoticeFormType, NoticeNoticeType, String, String> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
