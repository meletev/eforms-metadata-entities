/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.Interval;
import eu.europa.ec.mdd.generated.tables.interfaces.IInterval;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IntervalRecord extends UpdatableRecordImpl<IntervalRecord> implements Record3<String, String, String>, IInterval {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>interval.id</code>.
   */
  @Override
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>interval.id</code>.
   */
  @Override
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>interval.lower_value</code>.
   */
  @Override
  public void setLowerValue(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>interval.lower_value</code>.
   */
  @Override
  public String getLowerValue() {
    return (String) get(1);
  }

  /**
   * Setter for <code>interval.higher_value</code>.
   */
  @Override
  public void setHigherValue(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>interval.higher_value</code>.
   */
  @Override
  public String getHigherValue() {
    return (String) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<String, String, String> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Interval.INTERVAL.ID;
  }

  @Override
  public Field<String> field2() {
    return Interval.INTERVAL.LOWER_VALUE;
  }

  @Override
  public Field<String> field3() {
    return Interval.INTERVAL.HIGHER_VALUE;
  }

  @Override
  public String component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getLowerValue();
  }

  @Override
  public String component3() {
    return getHigherValue();
  }

  @Override
  public String value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getLowerValue();
  }

  @Override
  public String value3() {
    return getHigherValue();
  }

  @Override
  public IntervalRecord value1(String value) {
    setId(value);
    return this;
  }

  @Override
  public IntervalRecord value2(String value) {
    setLowerValue(value);
    return this;
  }

  @Override
  public IntervalRecord value3(String value) {
    setHigherValue(value);
    return this;
  }

  @Override
  public IntervalRecord values(String value1, String value2, String value3) {
    value1(value1);
    value2(value2);
    value3(value3);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IInterval from) {
    setId(from.getId());
    setLowerValue(from.getLowerValue());
    setHigherValue(from.getHigherValue());
  }

  @Override
  public <E extends IInterval> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached IntervalRecord
   */
  public IntervalRecord() {
    super(Interval.INTERVAL);
  }

  /**
   * Create a detached, initialised IntervalRecord
   */
  public IntervalRecord(String id, String lowerValue, String higherValue) {
    super(Interval.INTERVAL);

    setId(id);
    setLowerValue(lowerValue);
    setHigherValue(higherValue);
  }
}
