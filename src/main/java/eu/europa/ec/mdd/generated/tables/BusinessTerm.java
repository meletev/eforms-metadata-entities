/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.BusinessTermRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusinessTerm extends TableImpl<BusinessTermRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>business_term</code>
   */
  public static final BusinessTerm BUSINESS_TERM = new BusinessTerm();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<BusinessTermRecord> getRecordType() {
    return BusinessTermRecord.class;
  }

  /**
   * The column <code>business_term.id</code>.
   */
  public final TableField<BusinessTermRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>business_term.business_group_id</code>.
   */
  public final TableField<BusinessTermRecord, String> BUSINESS_GROUP_ID = createField(DSL.name("business_group_id"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>business_term.type</code>.
   */
  public final TableField<BusinessTermRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>business_term.description</code>.
   */
  public final TableField<BusinessTermRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

  private BusinessTerm(Name alias, Table<BusinessTermRecord> aliased) {
    this(alias, aliased, null);
  }

  private BusinessTerm(Name alias, Table<BusinessTermRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>business_term</code> table reference
   */
  public BusinessTerm(String alias) {
    this(DSL.name(alias), BUSINESS_TERM);
  }

  /**
   * Create an aliased <code>business_term</code> table reference
   */
  public BusinessTerm(Name alias) {
    this(alias, BUSINESS_TERM);
  }

  /**
   * Create a <code>business_term</code> table reference
   */
  public BusinessTerm() {
    this(DSL.name("business_term"), null);
  }

  public <O extends Record> BusinessTerm(Table<O> child, ForeignKey<O, BusinessTermRecord> key) {
    super(child, key, BUSINESS_TERM);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.BUSINESS_TERM_BUSINESS_GROUP_ID);
  }

  @Override
  public UniqueKey<BusinessTermRecord> getPrimaryKey() {
    return Keys.KEY_BUSINESS_TERM_PRIMARY;
  }

  @Override
  public List<UniqueKey<BusinessTermRecord>> getKeys() {
    return Arrays.<UniqueKey<BusinessTermRecord>>asList(Keys.KEY_BUSINESS_TERM_PRIMARY);
  }

  @Override
  public List<ForeignKey<BusinessTermRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<BusinessTermRecord, ?>>asList(Keys.BUSINESS_TERM_IBFK_1);
  }

  private transient BusinessTerm _businessTerm;

  public BusinessTerm businessTerm() {
    if (_businessTerm == null)
      _businessTerm = new BusinessTerm(this, Keys.BUSINESS_TERM_IBFK_1);

    return _businessTerm;
  }

  @Override
  public BusinessTerm as(String alias) {
    return new BusinessTerm(DSL.name(alias), this);
  }

  @Override
  public BusinessTerm as(Name alias) {
    return new BusinessTerm(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public BusinessTerm rename(String name) {
    return new BusinessTerm(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public BusinessTerm rename(Name name) {
    return new BusinessTerm(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<String, String, String, String> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
