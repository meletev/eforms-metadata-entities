/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.daos;


import eu.europa.ec.mdd.generated.tables.SpecialPurposeNode;
import eu.europa.ec.mdd.generated.tables.records.SpecialPurposeNodeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SpecialPurposeNodeDao extends DAOImpl<SpecialPurposeNodeRecord, eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode, String> {

  /**
   * Create a new SpecialPurposeNodeDao without any configuration
   */
  public SpecialPurposeNodeDao() {
    super(SpecialPurposeNode.SPECIAL_PURPOSE_NODE, eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode.class);
  }

  /**
   * Create a new SpecialPurposeNodeDao with an attached configuration
   */
  @Autowired
  public SpecialPurposeNodeDao(Configuration configuration) {
    super(SpecialPurposeNode.SPECIAL_PURPOSE_NODE, eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode.class, configuration);
  }

  @Override
  public String getId(eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode object) {
    return object.getId();
  }

  /**
   * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
    return fetchRange(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode> fetchById(String... values) {
    return fetch(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.ID, values);
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  public eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode fetchOneById(String value) {
    return fetchOne(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.ID, value);
  }

  /**
   * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
    return fetchRange(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.DESCRIPTION, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>description IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode> fetchByDescription(String... values) {
    return fetch(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.DESCRIPTION, values);
  }

  /**
   * Fetch a unique record that has <code>description = value</code>
   */
  public eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode fetchOneByDescription(String value) {
    return fetchOne(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.DESCRIPTION, value);
  }

  /**
   * Fetch records that have <code>node_id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode> fetchRangeOfNodeId(String lowerInclusive, String upperInclusive) {
    return fetchRange(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.NODE_ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>node_id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode> fetchByNodeId(String... values) {
    return fetch(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.NODE_ID, values);
  }

  /**
   * Fetch a unique record that has <code>node_id = value</code>
   */
  public eu.europa.ec.mdd.generated.tables.pojos.SpecialPurposeNode fetchOneByNodeId(String value) {
    return fetchOne(SpecialPurposeNode.SPECIAL_PURPOSE_NODE.NODE_ID, value);
  }
}
