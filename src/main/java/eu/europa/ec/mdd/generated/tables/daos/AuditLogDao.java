/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.daos;


import eu.europa.ec.mdd.generated.tables.AuditLog;
import eu.europa.ec.mdd.generated.tables.records.AuditLogRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AuditLogDao extends DAOImpl<AuditLogRecord, eu.europa.ec.mdd.generated.tables.pojos.AuditLog, Integer> {

  /**
   * Create a new AuditLogDao without any configuration
   */
  public AuditLogDao() {
    super(AuditLog.AUDIT_LOG, eu.europa.ec.mdd.generated.tables.pojos.AuditLog.class);
  }

  /**
   * Create a new AuditLogDao with an attached configuration
   */
  @Autowired
  public AuditLogDao(Configuration configuration) {
    super(AuditLog.AUDIT_LOG, eu.europa.ec.mdd.generated.tables.pojos.AuditLog.class, configuration);
  }

  @Override
  public Integer getId(eu.europa.ec.mdd.generated.tables.pojos.AuditLog object) {
    return object.getId();
  }

  /**
   * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
    return fetchRange(AuditLog.AUDIT_LOG.ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchById(Integer... values) {
    return fetch(AuditLog.AUDIT_LOG.ID, values);
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  public eu.europa.ec.mdd.generated.tables.pojos.AuditLog fetchOneById(Integer value) {
    return fetchOne(AuditLog.AUDIT_LOG.ID, value);
  }

  /**
   * Fetch records that have <code>message BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchRangeOfMessage(String lowerInclusive, String upperInclusive) {
    return fetchRange(AuditLog.AUDIT_LOG.MESSAGE, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>message IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchByMessage(String... values) {
    return fetch(AuditLog.AUDIT_LOG.MESSAGE, values);
  }

  /**
   * Fetch records that have <code>user BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchRangeOfUser(String lowerInclusive, String upperInclusive) {
    return fetchRange(AuditLog.AUDIT_LOG.USER, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>user IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchByUser(String... values) {
    return fetch(AuditLog.AUDIT_LOG.USER, values);
  }

  /**
   * Fetch records that have <code>created_on BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchRangeOfCreatedOn(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
    return fetchRange(AuditLog.AUDIT_LOG.CREATED_ON, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>created_on IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchByCreatedOn(LocalDateTime... values) {
    return fetch(AuditLog.AUDIT_LOG.CREATED_ON, values);
  }

  /**
   * Fetch records that have <code>host BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchRangeOfHost(String lowerInclusive, String upperInclusive) {
    return fetchRange(AuditLog.AUDIT_LOG.HOST, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>host IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.AuditLog> fetchByHost(String... values) {
    return fetch(AuditLog.AUDIT_LOG.HOST, values);
  }
}
