/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.daos;


import eu.europa.ec.mdd.generated.tables.CodeListToCode;
import eu.europa.ec.mdd.generated.tables.records.CodeListToCodeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record3;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CodeListToCodeDao extends DAOImpl<CodeListToCodeRecord, eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode, Record3<String, String, String>> {

  /**
   * Create a new CodeListToCodeDao without any configuration
   */
  public CodeListToCodeDao() {
    super(CodeListToCode.CODE_LIST_TO_CODE, eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode.class);
  }

  /**
   * Create a new CodeListToCodeDao with an attached configuration
   */
  @Autowired
  public CodeListToCodeDao(Configuration configuration) {
    super(CodeListToCode.CODE_LIST_TO_CODE, eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode.class, configuration);
  }

  @Override
  public Record3<String, String, String> getId(eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode object) {
    return compositeKeyRecord(object.getCodeListId(), object.getCodeValue(), object.getCodeCodeListId());
  }

  /**
   * Fetch records that have <code>code_list_id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchRangeOfCodeListId(String lowerInclusive, String upperInclusive) {
    return fetchRange(CodeListToCode.CODE_LIST_TO_CODE.CODE_LIST_ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>code_list_id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchByCodeListId(String... values) {
    return fetch(CodeListToCode.CODE_LIST_TO_CODE.CODE_LIST_ID, values);
  }

  /**
   * Fetch records that have <code>code_value BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchRangeOfCodeValue(String lowerInclusive, String upperInclusive) {
    return fetchRange(CodeListToCode.CODE_LIST_TO_CODE.CODE_VALUE, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>code_value IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchByCodeValue(String... values) {
    return fetch(CodeListToCode.CODE_LIST_TO_CODE.CODE_VALUE, values);
  }

  /**
   * Fetch records that have <code>code_code_list_id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchRangeOfCodeCodeListId(String lowerInclusive, String upperInclusive) {
    return fetchRange(CodeListToCode.CODE_LIST_TO_CODE.CODE_CODE_LIST_ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>code_code_list_id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchByCodeCodeListId(String... values) {
    return fetch(CodeListToCode.CODE_LIST_TO_CODE.CODE_CODE_LIST_ID, values);
  }

  /**
   * Fetch records that have <code>for_jooq_batch BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchRangeOfForJooqBatch(Boolean lowerInclusive, Boolean upperInclusive) {
    return fetchRange(CodeListToCode.CODE_LIST_TO_CODE.FOR_JOOQ_BATCH, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>for_jooq_batch IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.CodeListToCode> fetchByForJooqBatch(Boolean... values) {
    return fetch(CodeListToCode.CODE_LIST_TO_CODE.FOR_JOOQ_BATCH, values);
  }
}
