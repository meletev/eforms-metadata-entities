/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.ViewRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class View extends TableImpl<ViewRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>view</code>
   */
  public static final View VIEW = new View();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ViewRecord> getRecordType() {
    return ViewRecord.class;
  }

  /**
   * The column <code>view.id</code>.
   */
  public final TableField<ViewRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view.name</code>.
   */
  public final TableField<ViewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>view.description</code>.
   */
  public final TableField<ViewRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024), this, "");

  /**
   * The column <code>view.draft</code>. Drafts are excluded from the export
   */
  public final TableField<ViewRecord, Boolean> DRAFT = createField(DSL.name("draft"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Drafts are excluded from the export");

  /**
   * The column <code>view.created</code>.
   */
  public final TableField<ViewRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

  private View(Name alias, Table<ViewRecord> aliased) {
    this(alias, aliased, null);
  }

  private View(Name alias, Table<ViewRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>view</code> table reference
   */
  public View(String alias) {
    this(DSL.name(alias), VIEW);
  }

  /**
   * Create an aliased <code>view</code> table reference
   */
  public View(Name alias) {
    this(alias, VIEW);
  }

  /**
   * Create a <code>view</code> table reference
   */
  public View() {
    this(DSL.name("view"), null);
  }

  public <O extends Record> View(Table<O> child, ForeignKey<O, ViewRecord> key) {
    super(child, key, VIEW);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<ViewRecord> getPrimaryKey() {
    return Keys.KEY_VIEW_PRIMARY;
  }

  @Override
  public List<UniqueKey<ViewRecord>> getKeys() {
    return Arrays.<UniqueKey<ViewRecord>>asList(Keys.KEY_VIEW_PRIMARY);
  }

  @Override
  public View as(String alias) {
    return new View(DSL.name(alias), this);
  }

  @Override
  public View as(Name alias) {
    return new View(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public View rename(String name) {
    return new View(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public View rename(Name name) {
    return new View(name, null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<String, String, String, Boolean, LocalDateTime> fieldsRow() {
    return (Row5) super.fieldsRow();
  }
}
