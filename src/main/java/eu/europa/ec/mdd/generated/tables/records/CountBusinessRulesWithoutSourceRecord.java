/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.enums.CountBusinessRulesWithoutSourceType;
import eu.europa.ec.mdd.generated.tables.CountBusinessRulesWithoutSource;
import eu.europa.ec.mdd.generated.tables.interfaces.ICountBusinessRulesWithoutSource;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountBusinessRulesWithoutSourceRecord extends TableRecordImpl<CountBusinessRulesWithoutSourceRecord> implements Record4<CountBusinessRulesWithoutSourceType, Long, Long, Long>, ICountBusinessRulesWithoutSource {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>count_business_rules_without_source.type</code>.
   */
  @Override
  public void setType(CountBusinessRulesWithoutSourceType value) {
    set(0, value);
  }

  /**
   * Getter for <code>count_business_rules_without_source.type</code>.
   */
  @Override
  public CountBusinessRulesWithoutSourceType getType() {
    return (CountBusinessRulesWithoutSourceType) get(0);
  }

  /**
   * Setter for <code>count_business_rules_without_source.with_source</code>.
   */
  @Override
  public void setWithSource(Long value) {
    set(1, value);
  }

  /**
   * Getter for <code>count_business_rules_without_source.with_source</code>.
   */
  @Override
  public Long getWithSource() {
    return (Long) get(1);
  }

  /**
   * Setter for <code>count_business_rules_without_source.without_source</code>.
   */
  @Override
  public void setWithoutSource(Long value) {
    set(2, value);
  }

  /**
   * Getter for <code>count_business_rules_without_source.without_source</code>.
   */
  @Override
  public Long getWithoutSource() {
    return (Long) get(2);
  }

  /**
   * Setter for <code>count_business_rules_without_source.total</code>.
   */
  @Override
  public void setTotal(Long value) {
    set(3, value);
  }

  /**
   * Getter for <code>count_business_rules_without_source.total</code>.
   */
  @Override
  public Long getTotal() {
    return (Long) get(3);
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row4<CountBusinessRulesWithoutSourceType, Long, Long, Long> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<CountBusinessRulesWithoutSourceType, Long, Long, Long> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<CountBusinessRulesWithoutSourceType> field1() {
    return CountBusinessRulesWithoutSource.COUNT_BUSINESS_RULES_WITHOUT_SOURCE.TYPE;
  }

  @Override
  public Field<Long> field2() {
    return CountBusinessRulesWithoutSource.COUNT_BUSINESS_RULES_WITHOUT_SOURCE.WITH_SOURCE;
  }

  @Override
  public Field<Long> field3() {
    return CountBusinessRulesWithoutSource.COUNT_BUSINESS_RULES_WITHOUT_SOURCE.WITHOUT_SOURCE;
  }

  @Override
  public Field<Long> field4() {
    return CountBusinessRulesWithoutSource.COUNT_BUSINESS_RULES_WITHOUT_SOURCE.TOTAL;
  }

  @Override
  public CountBusinessRulesWithoutSourceType component1() {
    return getType();
  }

  @Override
  public Long component2() {
    return getWithSource();
  }

  @Override
  public Long component3() {
    return getWithoutSource();
  }

  @Override
  public Long component4() {
    return getTotal();
  }

  @Override
  public CountBusinessRulesWithoutSourceType value1() {
    return getType();
  }

  @Override
  public Long value2() {
    return getWithSource();
  }

  @Override
  public Long value3() {
    return getWithoutSource();
  }

  @Override
  public Long value4() {
    return getTotal();
  }

  @Override
  public CountBusinessRulesWithoutSourceRecord value1(CountBusinessRulesWithoutSourceType value) {
    setType(value);
    return this;
  }

  @Override
  public CountBusinessRulesWithoutSourceRecord value2(Long value) {
    setWithSource(value);
    return this;
  }

  @Override
  public CountBusinessRulesWithoutSourceRecord value3(Long value) {
    setWithoutSource(value);
    return this;
  }

  @Override
  public CountBusinessRulesWithoutSourceRecord value4(Long value) {
    setTotal(value);
    return this;
  }

  @Override
  public CountBusinessRulesWithoutSourceRecord values(CountBusinessRulesWithoutSourceType value1, Long value2, Long value3, Long value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICountBusinessRulesWithoutSource from) {
    setType(from.getType());
    setWithSource(from.getWithSource());
    setWithoutSource(from.getWithoutSource());
    setTotal(from.getTotal());
  }

  @Override
  public <E extends ICountBusinessRulesWithoutSource> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached CountBusinessRulesWithoutSourceRecord
   */
  public CountBusinessRulesWithoutSourceRecord() {
    super(CountBusinessRulesWithoutSource.COUNT_BUSINESS_RULES_WITHOUT_SOURCE);
  }

  /**
   * Create a detached, initialised CountBusinessRulesWithoutSourceRecord
   */
  public CountBusinessRulesWithoutSourceRecord(CountBusinessRulesWithoutSourceType type, Long withSource, Long withoutSource, Long total) {
    super(CountBusinessRulesWithoutSource.COUNT_BUSINESS_RULES_WITHOUT_SOURCE);

    setType(type);
    setWithSource(withSource);
    setWithoutSource(withoutSource);
    setTotal(total);
  }
}
