/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.OldViewTemplateRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldViewTemplate extends TableImpl<OldViewTemplateRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>old_view_template</code>
   */
  public static final OldViewTemplate OLD_VIEW_TEMPLATE = new OldViewTemplate();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<OldViewTemplateRecord> getRecordType() {
    return OldViewTemplateRecord.class;
  }

  /**
   * The column <code>old_view_template.id</code>. Zero is root (can have a prefix)
   */
  public final TableField<OldViewTemplateRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "Zero is root (can have a prefix)");

  /**
   * The column <code>old_view_template.parent_id</code>.
   */
  public final TableField<OldViewTemplateRecord, String> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>old_view_template.view_id</code>.
   */
  public final TableField<OldViewTemplateRecord, String> VIEW_ID = createField(DSL.name("view_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>old_view_template.sort_order</code>.
   */
  public final TableField<OldViewTemplateRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false), this, "");

  /**
   * The column <code>old_view_template.number</code>.
   */
  public final TableField<OldViewTemplateRecord, String> NUMBER = createField(DSL.name("number"), SQLDataType.VARCHAR(64), this, "");

  /**
   * The column <code>old_view_template.template</code>.
   */
  public final TableField<OldViewTemplateRecord, String> TEMPLATE = createField(DSL.name("template"), SQLDataType.VARCHAR(1024), this, "");

  /**
   * The column <code>old_view_template.created</code>.
   */
  public final TableField<OldViewTemplateRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

  /**
   * The column <code>old_view_template.imported</code>. Set by import code
   */
  public final TableField<OldViewTemplateRecord, LocalDateTime> IMPORTED = createField(DSL.name("imported"), SQLDataType.LOCALDATETIME(0), this, "Set by import code");

  /**
   * The column <code>old_view_template.repeats_with_node</code>.
   */
  public final TableField<OldViewTemplateRecord, String> REPEATS_WITH_NODE = createField(DSL.name("repeats_with_node"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>old_view_template.repeats_with_field</code>.
   */
  public final TableField<OldViewTemplateRecord, String> REPEATS_WITH_FIELD = createField(DSL.name("repeats_with_field"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>old_view_template.context</code>.
   */
  public final TableField<OldViewTemplateRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.VARCHAR(255), this, "");

  private OldViewTemplate(Name alias, Table<OldViewTemplateRecord> aliased) {
    this(alias, aliased, null);
  }

  private OldViewTemplate(Name alias, Table<OldViewTemplateRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>old_view_template</code> table reference
   */
  public OldViewTemplate(String alias) {
    this(DSL.name(alias), OLD_VIEW_TEMPLATE);
  }

  /**
   * Create an aliased <code>old_view_template</code> table reference
   */
  public OldViewTemplate(Name alias) {
    this(alias, OLD_VIEW_TEMPLATE);
  }

  /**
   * Create a <code>old_view_template</code> table reference
   */
  public OldViewTemplate() {
    this(DSL.name("old_view_template"), null);
  }

  public <O extends Record> OldViewTemplate(Table<O> child, ForeignKey<O, OldViewTemplateRecord> key) {
    super(child, key, OLD_VIEW_TEMPLATE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.OLD_VIEW_TEMPLATE_FK_VIEW_TEMPLATE_VIEW_1_IDX, Indexes.OLD_VIEW_TEMPLATE_FK_VIEW_TEMPLATE_VIEW_TEMPLATE);
  }

  @Override
  public UniqueKey<OldViewTemplateRecord> getPrimaryKey() {
    return Keys.KEY_OLD_VIEW_TEMPLATE_PRIMARY;
  }

  @Override
  public List<UniqueKey<OldViewTemplateRecord>> getKeys() {
    return Arrays.<UniqueKey<OldViewTemplateRecord>>asList(Keys.KEY_OLD_VIEW_TEMPLATE_PRIMARY);
  }

  @Override
  public List<ForeignKey<OldViewTemplateRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<OldViewTemplateRecord, ?>>asList(Keys.FK_VIEW_TEMPLATE_VIEW_1);
  }

  private transient View _view;

  public View view() {
    if (_view == null)
      _view = new View(this, Keys.FK_VIEW_TEMPLATE_VIEW_1);

    return _view;
  }

  @Override
  public OldViewTemplate as(String alias) {
    return new OldViewTemplate(DSL.name(alias), this);
  }

  @Override
  public OldViewTemplate as(Name alias) {
    return new OldViewTemplate(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public OldViewTemplate rename(String name) {
    return new OldViewTemplate(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public OldViewTemplate rename(Name name) {
    return new OldViewTemplate(name, null);
  }

  // -------------------------------------------------------------------------
  // Row11 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row11<String, String, String, Integer, String, String, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
    return (Row11) super.fieldsRow();
  }
}
