/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.enums.LabelAssetType;
import eu.europa.ec.mdd.generated.enums.LabelLabelType;
import eu.europa.ec.mdd.generated.tables.records.LabelRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Label extends TableImpl<LabelRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>label</code>
   */
  public static final Label LABEL = new Label();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<LabelRecord> getRecordType() {
    return LabelRecord.class;
  }

  /**
   * The column <code>label.id</code>.
   */
  public final TableField<LabelRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>label.asset_type</code>.
   */
  public final TableField<LabelRecord, LabelAssetType> ASSET_TYPE = createField(DSL.name("asset_type"), SQLDataType.VARCHAR(13).asEnumDataType(eu.europa.ec.mdd.generated.enums.LabelAssetType.class), this, "");

  /**
   * The column <code>label.label_type</code>.
   */
  public final TableField<LabelRecord, LabelLabelType> LABEL_TYPE = createField(DSL.name("label_type"), SQLDataType.VARCHAR(11).asEnumDataType(eu.europa.ec.mdd.generated.enums.LabelLabelType.class), this, "");

  /**
   * The column <code>label.asset_id</code>.
   */
  public final TableField<LabelRecord, String> ASSET_ID = createField(DSL.name("asset_id"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>label.old_id</code>.
   */
  public final TableField<LabelRecord, String> OLD_ID = createField(DSL.name("old_id"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>label.comment</code>.
   */
  public final TableField<LabelRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1000), this, "");

  /**
   * The column <code>label.generated</code>.
   */
  public final TableField<LabelRecord, Boolean> GENERATED = createField(DSL.name("generated"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

  /**
   * The column <code>label.en</code>.
   */
  public final TableField<LabelRecord, String> EN = createField(DSL.name("en"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.fr</code>.
   */
  public final TableField<LabelRecord, String> FR = createField(DSL.name("fr"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.de</code>.
   */
  public final TableField<LabelRecord, String> DE = createField(DSL.name("de"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.bg</code>.
   */
  public final TableField<LabelRecord, String> BG = createField(DSL.name("bg"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.cs</code>.
   */
  public final TableField<LabelRecord, String> CS = createField(DSL.name("cs"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.da</code>.
   */
  public final TableField<LabelRecord, String> DA = createField(DSL.name("da"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.el</code>.
   */
  public final TableField<LabelRecord, String> EL = createField(DSL.name("el"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.es</code>.
   */
  public final TableField<LabelRecord, String> ES = createField(DSL.name("es"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.et</code>.
   */
  public final TableField<LabelRecord, String> ET = createField(DSL.name("et"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.fi</code>.
   */
  public final TableField<LabelRecord, String> FI = createField(DSL.name("fi"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.ga</code>.
   */
  public final TableField<LabelRecord, String> GA = createField(DSL.name("ga"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.hr</code>.
   */
  public final TableField<LabelRecord, String> HR = createField(DSL.name("hr"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.hu</code>.
   */
  public final TableField<LabelRecord, String> HU = createField(DSL.name("hu"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.it</code>.
   */
  public final TableField<LabelRecord, String> IT = createField(DSL.name("it"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.lt</code>.
   */
  public final TableField<LabelRecord, String> LT = createField(DSL.name("lt"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.lv</code>.
   */
  public final TableField<LabelRecord, String> LV = createField(DSL.name("lv"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.mt</code>.
   */
  public final TableField<LabelRecord, String> MT = createField(DSL.name("mt"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.nl</code>.
   */
  public final TableField<LabelRecord, String> NL = createField(DSL.name("nl"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.pl</code>.
   */
  public final TableField<LabelRecord, String> PL = createField(DSL.name("pl"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.pt</code>.
   */
  public final TableField<LabelRecord, String> PT = createField(DSL.name("pt"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.ro</code>.
   */
  public final TableField<LabelRecord, String> RO = createField(DSL.name("ro"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.sk</code>.
   */
  public final TableField<LabelRecord, String> SK = createField(DSL.name("sk"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.sl</code>.
   */
  public final TableField<LabelRecord, String> SL = createField(DSL.name("sl"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>label.sv</code>.
   */
  public final TableField<LabelRecord, String> SV = createField(DSL.name("sv"), SQLDataType.CLOB, this, "");

  private Label(Name alias, Table<LabelRecord> aliased) {
    this(alias, aliased, null);
  }

  private Label(Name alias, Table<LabelRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>label</code> table reference
   */
  public Label(String alias) {
    this(DSL.name(alias), LABEL);
  }

  /**
   * Create an aliased <code>label</code> table reference
   */
  public Label(Name alias) {
    this(alias, LABEL);
  }

  /**
   * Create a <code>label</code> table reference
   */
  public Label() {
    this(DSL.name("label"), null);
  }

  public <O extends Record> Label(Table<O> child, ForeignKey<O, LabelRecord> key) {
    super(child, key, LABEL);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<LabelRecord> getPrimaryKey() {
    return Keys.KEY_LABEL_PRIMARY;
  }

  @Override
  public List<UniqueKey<LabelRecord>> getKeys() {
    return Arrays.<UniqueKey<LabelRecord>>asList(Keys.KEY_LABEL_PRIMARY);
  }

  @Override
  public Label as(String alias) {
    return new Label(DSL.name(alias), this);
  }

  @Override
  public Label as(Name alias) {
    return new Label(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Label rename(String name) {
    return new Label(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Label rename(Name name) {
    return new Label(name, null);
  }
}
