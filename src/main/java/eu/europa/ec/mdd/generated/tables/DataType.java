/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.DataTypeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataType extends TableImpl<DataTypeRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>data_type</code>
   */
  public static final DataType DATA_TYPE = new DataType();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<DataTypeRecord> getRecordType() {
    return DataTypeRecord.class;
  }

  /**
   * The column <code>data_type.id_eforms</code>.
   */
  public final TableField<DataTypeRecord, String> ID_EFORMS = createField(DSL.name("id_eforms"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>data_type.regulation</code>.
   */
  public final TableField<DataTypeRecord, String> REGULATION = createField(DSL.name("regulation"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>data_type.text_area_possible</code>.
   */
  public final TableField<DataTypeRecord, Boolean> TEXT_AREA_POSSIBLE = createField(DSL.name("text_area_possible"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

  /**
   * The column <code>data_type.description</code>.
   */
  public final TableField<DataTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(512), this, "");

  /**
   * The column <code>data_type.display_type_default</code>.
   */
  public final TableField<DataTypeRecord, String> DISPLAY_TYPE_DEFAULT = createField(DSL.name("display_type_default"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>data_type.display_type_1</code>.
   */
  public final TableField<DataTypeRecord, String> DISPLAY_TYPE_1 = createField(DSL.name("display_type_1"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>data_type.display_type_2</code>.
   */
  public final TableField<DataTypeRecord, String> DISPLAY_TYPE_2 = createField(DSL.name("display_type_2"), SQLDataType.VARCHAR(255), this, "");

  private DataType(Name alias, Table<DataTypeRecord> aliased) {
    this(alias, aliased, null);
  }

  private DataType(Name alias, Table<DataTypeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>data_type</code> table reference
   */
  public DataType(String alias) {
    this(DSL.name(alias), DATA_TYPE);
  }

  /**
   * Create an aliased <code>data_type</code> table reference
   */
  public DataType(Name alias) {
    this(alias, DATA_TYPE);
  }

  /**
   * Create a <code>data_type</code> table reference
   */
  public DataType() {
    this(DSL.name("data_type"), null);
  }

  public <O extends Record> DataType(Table<O> child, ForeignKey<O, DataTypeRecord> key) {
    super(child, key, DATA_TYPE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<DataTypeRecord> getPrimaryKey() {
    return Keys.KEY_DATA_TYPE_PRIMARY;
  }

  @Override
  public List<UniqueKey<DataTypeRecord>> getKeys() {
    return Arrays.<UniqueKey<DataTypeRecord>>asList(Keys.KEY_DATA_TYPE_PRIMARY);
  }

  @Override
  public DataType as(String alias) {
    return new DataType(DSL.name(alias), this);
  }

  @Override
  public DataType as(Name alias) {
    return new DataType(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public DataType rename(String name) {
    return new DataType(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public DataType rename(Name name) {
    return new DataType(name, null);
  }

  // -------------------------------------------------------------------------
  // Row7 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row7<String, String, Boolean, String, String, String, String> fieldsRow() {
    return (Row7) super.fieldsRow();
  }
}
