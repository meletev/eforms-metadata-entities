/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.Node;
import eu.europa.ec.mdd.generated.tables.interfaces.INode;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Contains XML nodes that contain other nodes or fields. Used to represent 
 * the XML structure except the leaf nodes (  which are the fields).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodeRecord extends UpdatableRecordImpl<NodeRecord> implements Record8<String, String, String, Boolean, String, String, String, Boolean>, INode {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>node.id</code>.
   */
  @Override
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>node.id</code>.
   */
  @Override
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>node.parent_id</code>.
   */
  @Override
  public void setParentId(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>node.parent_id</code>.
   */
  @Override
  public String getParentId() {
    return (String) get(1);
  }

  /**
   * Setter for <code>node.xpath_relative</code>.
   */
  @Override
  public void setXpathRelative(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>node.xpath_relative</code>.
   */
  @Override
  public String getXpathRelative() {
    return (String) get(2);
  }

  /**
   * Setter for <code>node.repeatable</code>.
   */
  @Override
  public void setRepeatable(Boolean value) {
    set(3, value);
  }

  /**
   * Getter for <code>node.repeatable</code>.
   */
  @Override
  public Boolean getRepeatable() {
    return (Boolean) get(3);
  }

  /**
   * Setter for <code>node.identifier_field_id</code>. If the node is repeatable, then the identifier_field_id should point to the field of type "id" which is supposed to hold the identifier of whatever entities this repeatable node contains.
   */
  @Override
  public void setIdentifierFieldId(String value) {
    set(4, value);
  }

  /**
   * Getter for <code>node.identifier_field_id</code>. If the node is repeatable, then the identifier_field_id should point to the field of type "id" which is supposed to hold the identifier of whatever entities this repeatable node contains.
   */
  @Override
  public String getIdentifierFieldId() {
    return (String) get(4);
  }

  /**
   * Setter for <code>node.name</code>. Human readable name
   */
  @Override
  public void setName(String value) {
    set(5, value);
  }

  /**
   * Getter for <code>node.name</code>. Human readable name
   */
  @Override
  public String getName() {
    return (String) get(5);
  }

  /**
   * Setter for <code>node.description</code>.
   */
  @Override
  public void setDescription(String value) {
    set(6, value);
  }

  /**
   * Getter for <code>node.description</code>.
   */
  @Override
  public String getDescription() {
    return (String) get(6);
  }

  /**
   * Setter for <code>node.db_generated</code>.
   */
  @Override
  public void setDbGenerated(Boolean value) {
    set(7, value);
  }

  /**
   * Getter for <code>node.db_generated</code>.
   */
  @Override
  public Boolean getDbGenerated() {
    return (Boolean) get(7);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record8 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, String, Boolean, String, String, String, Boolean> fieldsRow() {
    return (Row8) super.fieldsRow();
  }

  @Override
  public Row8<String, String, String, Boolean, String, String, String, Boolean> valuesRow() {
    return (Row8) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Node.NODE.ID;
  }

  @Override
  public Field<String> field2() {
    return Node.NODE.PARENT_ID;
  }

  @Override
  public Field<String> field3() {
    return Node.NODE.XPATH_RELATIVE;
  }

  @Override
  public Field<Boolean> field4() {
    return Node.NODE.REPEATABLE;
  }

  @Override
  public Field<String> field5() {
    return Node.NODE.IDENTIFIER_FIELD_ID;
  }

  @Override
  public Field<String> field6() {
    return Node.NODE.NAME;
  }

  @Override
  public Field<String> field7() {
    return Node.NODE.DESCRIPTION;
  }

  @Override
  public Field<Boolean> field8() {
    return Node.NODE.DB_GENERATED;
  }

  @Override
  public String component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getParentId();
  }

  @Override
  public String component3() {
    return getXpathRelative();
  }

  @Override
  public Boolean component4() {
    return getRepeatable();
  }

  @Override
  public String component5() {
    return getIdentifierFieldId();
  }

  @Override
  public String component6() {
    return getName();
  }

  @Override
  public String component7() {
    return getDescription();
  }

  @Override
  public Boolean component8() {
    return getDbGenerated();
  }

  @Override
  public String value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getParentId();
  }

  @Override
  public String value3() {
    return getXpathRelative();
  }

  @Override
  public Boolean value4() {
    return getRepeatable();
  }

  @Override
  public String value5() {
    return getIdentifierFieldId();
  }

  @Override
  public String value6() {
    return getName();
  }

  @Override
  public String value7() {
    return getDescription();
  }

  @Override
  public Boolean value8() {
    return getDbGenerated();
  }

  @Override
  public NodeRecord value1(String value) {
    setId(value);
    return this;
  }

  @Override
  public NodeRecord value2(String value) {
    setParentId(value);
    return this;
  }

  @Override
  public NodeRecord value3(String value) {
    setXpathRelative(value);
    return this;
  }

  @Override
  public NodeRecord value4(Boolean value) {
    setRepeatable(value);
    return this;
  }

  @Override
  public NodeRecord value5(String value) {
    setIdentifierFieldId(value);
    return this;
  }

  @Override
  public NodeRecord value6(String value) {
    setName(value);
    return this;
  }

  @Override
  public NodeRecord value7(String value) {
    setDescription(value);
    return this;
  }

  @Override
  public NodeRecord value8(Boolean value) {
    setDbGenerated(value);
    return this;
  }

  @Override
  public NodeRecord values(String value1, String value2, String value3, Boolean value4, String value5, String value6, String value7, Boolean value8) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    value6(value6);
    value7(value7);
    value8(value8);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(INode from) {
    setId(from.getId());
    setParentId(from.getParentId());
    setXpathRelative(from.getXpathRelative());
    setRepeatable(from.getRepeatable());
    setIdentifierFieldId(from.getIdentifierFieldId());
    setName(from.getName());
    setDescription(from.getDescription());
    setDbGenerated(from.getDbGenerated());
  }

  @Override
  public <E extends INode> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached NodeRecord
   */
  public NodeRecord() {
    super(Node.NODE);
  }

  /**
   * Create a detached, initialised NodeRecord
   */
  public NodeRecord(String id, String parentId, String xpathRelative, Boolean repeatable, String identifierFieldId, String name, String description, Boolean dbGenerated) {
    super(Node.NODE);

    setId(id);
    setParentId(parentId);
    setXpathRelative(xpathRelative);
    setRepeatable(repeatable);
    setIdentifierFieldId(identifierFieldId);
    setName(name);
    setDescription(description);
    setDbGenerated(dbGenerated);
  }
}
