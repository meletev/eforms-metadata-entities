/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.pojos;


import eu.europa.ec.mdd.generated.enums.CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus;
import eu.europa.ec.mdd.generated.tables.interfaces.ICountBusinessRulesSourceWithoutBusinessRules;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountBusinessRulesSourceWithoutBusinessRules implements ICountBusinessRulesSourceWithoutBusinessRules {

  private static final long serialVersionUID = 1L;

  private CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus implementationStatus;
  private Long                                                             notFound;
  private Long                                                             found;
  private Long                                                             total;

  public CountBusinessRulesSourceWithoutBusinessRules() {}

  public CountBusinessRulesSourceWithoutBusinessRules(ICountBusinessRulesSourceWithoutBusinessRules value) {
    this.implementationStatus = value.getImplementationStatus();
    this.notFound = value.getNotFound();
    this.found = value.getFound();
    this.total = value.getTotal();
  }

  public CountBusinessRulesSourceWithoutBusinessRules(
    CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus implementationStatus,
    Long                                                             notFound,
    Long                                                             found,
    Long                                                             total
  ) {
    this.implementationStatus = implementationStatus;
    this.notFound = notFound;
    this.found = found;
    this.total = total;
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.implementation_status</code>.
   */
  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus getImplementationStatus() {
    return this.implementationStatus;
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.implementation_status</code>.
   */
  @Override
  public void setImplementationStatus(CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus implementationStatus) {
    this.implementationStatus = implementationStatus;
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.not_found</code>.
   */
  @Override
  public Long getNotFound() {
    return this.notFound;
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.not_found</code>.
   */
  @Override
  public void setNotFound(Long notFound) {
    this.notFound = notFound;
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.found</code>.
   */
  @Override
  public Long getFound() {
    return this.found;
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.found</code>.
   */
  @Override
  public void setFound(Long found) {
    this.found = found;
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.total</code>.
   */
  @Override
  public Long getTotal() {
    return this.total;
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.total</code>.
   */
  @Override
  public void setTotal(Long total) {
    this.total = total;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CountBusinessRulesSourceWithoutBusinessRules (");

    sb.append(implementationStatus);
    sb.append(", ").append(notFound);
    sb.append(", ").append(found);
    sb.append(", ").append(total);

    sb.append(")");
    return sb.toString();
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICountBusinessRulesSourceWithoutBusinessRules from) {
    setImplementationStatus(from.getImplementationStatus());
    setNotFound(from.getNotFound());
    setFound(from.getFound());
    setTotal(from.getTotal());
  }

  @Override
  public <E extends ICountBusinessRulesSourceWithoutBusinessRules> E into(E into) {
    into.from(this);
    return into;
  }
}
