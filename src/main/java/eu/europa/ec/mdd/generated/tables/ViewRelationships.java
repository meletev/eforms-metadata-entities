/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.ViewRelationshipsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewRelationships extends TableImpl<ViewRelationshipsRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>view_relationships</code>
   */
  public static final ViewRelationships VIEW_RELATIONSHIPS = new ViewRelationships();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ViewRelationshipsRecord> getRecordType() {
    return ViewRelationshipsRecord.class;
  }

  /**
   * The column <code>view_relationships.view_id</code>.
   */
  public final TableField<ViewRelationshipsRecord, String> VIEW_ID = createField(DSL.name("view_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view_relationships.view_template_id</code>.
   */
  public final TableField<ViewRelationshipsRecord, String> VIEW_TEMPLATE_ID = createField(DSL.name("view_template_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view_relationships.view_structure_id</code>.
   */
  public final TableField<ViewRelationshipsRecord, String> VIEW_STRUCTURE_ID = createField(DSL.name("view_structure_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view_relationships.context</code>.
   */
  public final TableField<ViewRelationshipsRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.VARCHAR(512), this, "");

  /**
   * The column <code>view_relationships.db_created</code>.
   */
  public final TableField<ViewRelationshipsRecord, LocalDateTime> DB_CREATED = createField(DSL.name("db_created"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

  /**
   * The column <code>view_relationships.db_imported</code>.
   */
  public final TableField<ViewRelationshipsRecord, LocalDateTime> DB_IMPORTED = createField(DSL.name("db_imported"), SQLDataType.LOCALDATETIME(0), this, "");

  private ViewRelationships(Name alias, Table<ViewRelationshipsRecord> aliased) {
    this(alias, aliased, null);
  }

  private ViewRelationships(Name alias, Table<ViewRelationshipsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>view_relationships</code> table reference
   */
  public ViewRelationships(String alias) {
    this(DSL.name(alias), VIEW_RELATIONSHIPS);
  }

  /**
   * Create an aliased <code>view_relationships</code> table reference
   */
  public ViewRelationships(Name alias) {
    this(alias, VIEW_RELATIONSHIPS);
  }

  /**
   * Create a <code>view_relationships</code> table reference
   */
  public ViewRelationships() {
    this(DSL.name("view_relationships"), null);
  }

  public <O extends Record> ViewRelationships(Table<O> child, ForeignKey<O, ViewRelationshipsRecord> key) {
    super(child, key, VIEW_RELATIONSHIPS);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<ForeignKey<ViewRelationshipsRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<ViewRelationshipsRecord, ?>>asList(Keys.FK_VIEW_ID_IDX, Keys.FK_VIEW_TEMPLATE_ID_IDX, Keys.FK_VIEW_STRUCTURE_ID_IDX);
  }

  private transient View _view;
  private transient ViewTemplate _viewTemplate;
  private transient ViewStructure _viewStructure;

  public View view() {
    if (_view == null)
      _view = new View(this, Keys.FK_VIEW_ID_IDX);

    return _view;
  }

  public ViewTemplate viewTemplate() {
    if (_viewTemplate == null)
      _viewTemplate = new ViewTemplate(this, Keys.FK_VIEW_TEMPLATE_ID_IDX);

    return _viewTemplate;
  }

  public ViewStructure viewStructure() {
    if (_viewStructure == null)
      _viewStructure = new ViewStructure(this, Keys.FK_VIEW_STRUCTURE_ID_IDX);

    return _viewStructure;
  }

  @Override
  public ViewRelationships as(String alias) {
    return new ViewRelationships(DSL.name(alias), this);
  }

  @Override
  public ViewRelationships as(Name alias) {
    return new ViewRelationships(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ViewRelationships rename(String name) {
    return new ViewRelationships(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ViewRelationships rename(Name name) {
    return new ViewRelationships(name, null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
