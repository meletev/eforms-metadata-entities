/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.ViewTemplate;
import eu.europa.ec.mdd.generated.tables.interfaces.IViewTemplate;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTemplateRecord extends UpdatableRecordImpl<ViewTemplateRecord> implements Record8<String, String, Boolean, String, LocalDateTime, String, LocalDateTime, LocalDateTime>, IViewTemplate {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>view_template.id</code>.
   */
  @Override
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>view_template.id</code>.
   */
  @Override
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>view_template.template</code>. Contains EFX, starting with the context
   */
  @Override
  public void setTemplate(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>view_template.template</code>. Contains EFX, starting with the context
   */
  @Override
  public String getTemplate() {
    return (String) get(1);
  }

  /**
   * Setter for <code>view_template.draft</code>.
   */
  @Override
  public void setDraft(Boolean value) {
    set(2, value);
  }

  /**
   * Getter for <code>view_template.draft</code>.
   */
  @Override
  public Boolean getDraft() {
    return (Boolean) get(2);
  }

  /**
   * Setter for <code>view_template.draft_reason</code>.
   */
  @Override
  public void setDraftReason(String value) {
    set(3, value);
  }

  /**
   * Getter for <code>view_template.draft_reason</code>.
   */
  @Override
  public String getDraftReason() {
    return (String) get(3);
  }

  /**
   * Setter for <code>view_template.db_modified</code>.
   */
  @Override
  public void setDbModified(LocalDateTime value) {
    set(4, value);
  }

  /**
   * Getter for <code>view_template.db_modified</code>.
   */
  @Override
  public LocalDateTime getDbModified() {
    return (LocalDateTime) get(4);
  }

  /**
   * Setter for <code>view_template.db_modified_by</code>.
   */
  @Override
  public void setDbModifiedBy(String value) {
    set(5, value);
  }

  /**
   * Getter for <code>view_template.db_modified_by</code>.
   */
  @Override
  public String getDbModifiedBy() {
    return (String) get(5);
  }

  /**
   * Setter for <code>view_template.db_created</code>. Set during import
   */
  @Override
  public void setDbCreated(LocalDateTime value) {
    set(6, value);
  }

  /**
   * Getter for <code>view_template.db_created</code>. Set during import
   */
  @Override
  public LocalDateTime getDbCreated() {
    return (LocalDateTime) get(6);
  }

  /**
   * Setter for <code>view_template.db_imported</code>. Set during import
   */
  @Override
  public void setDbImported(LocalDateTime value) {
    set(7, value);
  }

  /**
   * Getter for <code>view_template.db_imported</code>. Set during import
   */
  @Override
  public LocalDateTime getDbImported() {
    return (LocalDateTime) get(7);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record8 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, Boolean, String, LocalDateTime, String, LocalDateTime, LocalDateTime> fieldsRow() {
    return (Row8) super.fieldsRow();
  }

  @Override
  public Row8<String, String, Boolean, String, LocalDateTime, String, LocalDateTime, LocalDateTime> valuesRow() {
    return (Row8) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return ViewTemplate.VIEW_TEMPLATE.ID;
  }

  @Override
  public Field<String> field2() {
    return ViewTemplate.VIEW_TEMPLATE.TEMPLATE;
  }

  @Override
  public Field<Boolean> field3() {
    return ViewTemplate.VIEW_TEMPLATE.DRAFT;
  }

  @Override
  public Field<String> field4() {
    return ViewTemplate.VIEW_TEMPLATE.DRAFT_REASON;
  }

  @Override
  public Field<LocalDateTime> field5() {
    return ViewTemplate.VIEW_TEMPLATE.DB_MODIFIED;
  }

  @Override
  public Field<String> field6() {
    return ViewTemplate.VIEW_TEMPLATE.DB_MODIFIED_BY;
  }

  @Override
  public Field<LocalDateTime> field7() {
    return ViewTemplate.VIEW_TEMPLATE.DB_CREATED;
  }

  @Override
  public Field<LocalDateTime> field8() {
    return ViewTemplate.VIEW_TEMPLATE.DB_IMPORTED;
  }

  @Override
  public String component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getTemplate();
  }

  @Override
  public Boolean component3() {
    return getDraft();
  }

  @Override
  public String component4() {
    return getDraftReason();
  }

  @Override
  public LocalDateTime component5() {
    return getDbModified();
  }

  @Override
  public String component6() {
    return getDbModifiedBy();
  }

  @Override
  public LocalDateTime component7() {
    return getDbCreated();
  }

  @Override
  public LocalDateTime component8() {
    return getDbImported();
  }

  @Override
  public String value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getTemplate();
  }

  @Override
  public Boolean value3() {
    return getDraft();
  }

  @Override
  public String value4() {
    return getDraftReason();
  }

  @Override
  public LocalDateTime value5() {
    return getDbModified();
  }

  @Override
  public String value6() {
    return getDbModifiedBy();
  }

  @Override
  public LocalDateTime value7() {
    return getDbCreated();
  }

  @Override
  public LocalDateTime value8() {
    return getDbImported();
  }

  @Override
  public ViewTemplateRecord value1(String value) {
    setId(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value2(String value) {
    setTemplate(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value3(Boolean value) {
    setDraft(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value4(String value) {
    setDraftReason(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value5(LocalDateTime value) {
    setDbModified(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value6(String value) {
    setDbModifiedBy(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value7(LocalDateTime value) {
    setDbCreated(value);
    return this;
  }

  @Override
  public ViewTemplateRecord value8(LocalDateTime value) {
    setDbImported(value);
    return this;
  }

  @Override
  public ViewTemplateRecord values(String value1, String value2, Boolean value3, String value4, LocalDateTime value5, String value6, LocalDateTime value7, LocalDateTime value8) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    value6(value6);
    value7(value7);
    value8(value8);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IViewTemplate from) {
    setId(from.getId());
    setTemplate(from.getTemplate());
    setDraft(from.getDraft());
    setDraftReason(from.getDraftReason());
    setDbModified(from.getDbModified());
    setDbModifiedBy(from.getDbModifiedBy());
    setDbCreated(from.getDbCreated());
    setDbImported(from.getDbImported());
  }

  @Override
  public <E extends IViewTemplate> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached ViewTemplateRecord
   */
  public ViewTemplateRecord() {
    super(ViewTemplate.VIEW_TEMPLATE);
  }

  /**
   * Create a detached, initialised ViewTemplateRecord
   */
  public ViewTemplateRecord(String id, String template, Boolean draft, String draftReason, LocalDateTime dbModified, String dbModifiedBy, LocalDateTime dbCreated, LocalDateTime dbImported) {
    super(ViewTemplate.VIEW_TEMPLATE);

    setId(id);
    setTemplate(template);
    setDraft(draft);
    setDraftReason(draftReason);
    setDbModified(dbModified);
    setDbModifiedBy(dbModifiedBy);
    setDbCreated(dbCreated);
    setDbImported(dbImported);
  }
}
