/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.Condition;
import eu.europa.ec.mdd.generated.tables.interfaces.ICondition;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConditionRecord extends UpdatableRecordImpl<ConditionRecord> implements Record3<Integer, String, String>, ICondition {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>condition.id</code>.
   */
  @Override
  public void setId(Integer value) {
    set(0, value);
  }

  /**
   * Getter for <code>condition.id</code>.
   */
  @Override
  public Integer getId() {
    return (Integer) get(0);
  }

  /**
   * Setter for <code>condition.description</code>.
   */
  @Override
  public void setDescription(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>condition.description</code>.
   */
  @Override
  public String getDescription() {
    return (String) get(1);
  }

  /**
   * Setter for <code>condition.expression_efx</code>.
   */
  @Override
  public void setExpressionEfx(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>condition.expression_efx</code>.
   */
  @Override
  public String getExpressionEfx() {
    return (String) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<Integer> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row3<Integer, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<Integer, String, String> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<Integer> field1() {
    return Condition.CONDITION.ID;
  }

  @Override
  public Field<String> field2() {
    return Condition.CONDITION.DESCRIPTION;
  }

  @Override
  public Field<String> field3() {
    return Condition.CONDITION.EXPRESSION_EFX;
  }

  @Override
  public Integer component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getDescription();
  }

  @Override
  public String component3() {
    return getExpressionEfx();
  }

  @Override
  public Integer value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getDescription();
  }

  @Override
  public String value3() {
    return getExpressionEfx();
  }

  @Override
  public ConditionRecord value1(Integer value) {
    setId(value);
    return this;
  }

  @Override
  public ConditionRecord value2(String value) {
    setDescription(value);
    return this;
  }

  @Override
  public ConditionRecord value3(String value) {
    setExpressionEfx(value);
    return this;
  }

  @Override
  public ConditionRecord values(Integer value1, String value2, String value3) {
    value1(value1);
    value2(value2);
    value3(value3);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICondition from) {
    setId(from.getId());
    setDescription(from.getDescription());
    setExpressionEfx(from.getExpressionEfx());
  }

  @Override
  public <E extends ICondition> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached ConditionRecord
   */
  public ConditionRecord() {
    super(Condition.CONDITION);
  }

  /**
   * Create a detached, initialised ConditionRecord
   */
  public ConditionRecord(Integer id, String description, String expressionEfx) {
    super(Condition.CONDITION);

    setId(id);
    setDescription(description);
    setExpressionEfx(expressionEfx);
  }
}
