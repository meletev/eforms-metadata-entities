/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.enums.CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus;
import eu.europa.ec.mdd.generated.tables.CountBusinessRulesSourceWithoutBusinessRules;
import eu.europa.ec.mdd.generated.tables.interfaces.ICountBusinessRulesSourceWithoutBusinessRules;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountBusinessRulesSourceWithoutBusinessRulesRecord extends TableRecordImpl<CountBusinessRulesSourceWithoutBusinessRulesRecord> implements Record4<CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus, Long, Long, Long>, ICountBusinessRulesSourceWithoutBusinessRules {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.implementation_status</code>.
   */
  @Override
  public void setImplementationStatus(CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus value) {
    set(0, value);
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.implementation_status</code>.
   */
  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus getImplementationStatus() {
    return (CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus) get(0);
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.not_found</code>.
   */
  @Override
  public void setNotFound(Long value) {
    set(1, value);
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.not_found</code>.
   */
  @Override
  public Long getNotFound() {
    return (Long) get(1);
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.found</code>.
   */
  @Override
  public void setFound(Long value) {
    set(2, value);
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.found</code>.
   */
  @Override
  public Long getFound() {
    return (Long) get(2);
  }

  /**
   * Setter for <code>count_business_rules_source_without_business_rules.total</code>.
   */
  @Override
  public void setTotal(Long value) {
    set(3, value);
  }

  /**
   * Getter for <code>count_business_rules_source_without_business_rules.total</code>.
   */
  @Override
  public Long getTotal() {
    return (Long) get(3);
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row4<CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus, Long, Long, Long> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus, Long, Long, Long> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus> field1() {
    return CountBusinessRulesSourceWithoutBusinessRules.COUNT_BUSINESS_RULES_SOURCE_WITHOUT_BUSINESS_RULES.IMPLEMENTATION_STATUS;
  }

  @Override
  public Field<Long> field2() {
    return CountBusinessRulesSourceWithoutBusinessRules.COUNT_BUSINESS_RULES_SOURCE_WITHOUT_BUSINESS_RULES.NOT_FOUND;
  }

  @Override
  public Field<Long> field3() {
    return CountBusinessRulesSourceWithoutBusinessRules.COUNT_BUSINESS_RULES_SOURCE_WITHOUT_BUSINESS_RULES.FOUND;
  }

  @Override
  public Field<Long> field4() {
    return CountBusinessRulesSourceWithoutBusinessRules.COUNT_BUSINESS_RULES_SOURCE_WITHOUT_BUSINESS_RULES.TOTAL;
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus component1() {
    return getImplementationStatus();
  }

  @Override
  public Long component2() {
    return getNotFound();
  }

  @Override
  public Long component3() {
    return getFound();
  }

  @Override
  public Long component4() {
    return getTotal();
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus value1() {
    return getImplementationStatus();
  }

  @Override
  public Long value2() {
    return getNotFound();
  }

  @Override
  public Long value3() {
    return getFound();
  }

  @Override
  public Long value4() {
    return getTotal();
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesRecord value1(CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus value) {
    setImplementationStatus(value);
    return this;
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesRecord value2(Long value) {
    setNotFound(value);
    return this;
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesRecord value3(Long value) {
    setFound(value);
    return this;
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesRecord value4(Long value) {
    setTotal(value);
    return this;
  }

  @Override
  public CountBusinessRulesSourceWithoutBusinessRulesRecord values(CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus value1, Long value2, Long value3, Long value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICountBusinessRulesSourceWithoutBusinessRules from) {
    setImplementationStatus(from.getImplementationStatus());
    setNotFound(from.getNotFound());
    setFound(from.getFound());
    setTotal(from.getTotal());
  }

  @Override
  public <E extends ICountBusinessRulesSourceWithoutBusinessRules> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached CountBusinessRulesSourceWithoutBusinessRulesRecord
   */
  public CountBusinessRulesSourceWithoutBusinessRulesRecord() {
    super(CountBusinessRulesSourceWithoutBusinessRules.COUNT_BUSINESS_RULES_SOURCE_WITHOUT_BUSINESS_RULES);
  }

  /**
   * Create a detached, initialised CountBusinessRulesSourceWithoutBusinessRulesRecord
   */
  public CountBusinessRulesSourceWithoutBusinessRulesRecord(CountBusinessRulesSourceWithoutBusinessRulesImplementationStatus implementationStatus, Long notFound, Long found, Long total) {
    super(CountBusinessRulesSourceWithoutBusinessRules.COUNT_BUSINESS_RULES_SOURCE_WITHOUT_BUSINESS_RULES);

    setImplementationStatus(implementationStatus);
    setNotFound(notFound);
    setFound(found);
    setTotal(total);
  }
}
