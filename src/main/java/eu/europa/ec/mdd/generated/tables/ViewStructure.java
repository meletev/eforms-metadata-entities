/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.ViewStructureRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewStructure extends TableImpl<ViewStructureRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>view_structure</code>
   */
  public static final ViewStructure VIEW_STRUCTURE = new ViewStructure();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ViewStructureRecord> getRecordType() {
    return ViewStructureRecord.class;
  }

  /**
   * The column <code>view_structure.id</code>.
   */
  public final TableField<ViewStructureRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view_structure.parent_id</code>.
   */
  public final TableField<ViewStructureRecord, String> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>view_structure.sort_order</code>.
   */
  public final TableField<ViewStructureRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false), this, "");

  /**
   * The column <code>view_structure.description</code>. For humans
   */
  public final TableField<ViewStructureRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "For humans");

  /**
   * The column <code>view_structure.db_modified_by</code>.
   */
  public final TableField<ViewStructureRecord, String> DB_MODIFIED_BY = createField(DSL.name("db_modified_by"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>view_structure.db_modified</code>.
   */
  public final TableField<ViewStructureRecord, LocalDateTime> DB_MODIFIED = createField(DSL.name("db_modified"), SQLDataType.LOCALDATETIME(0), this, "");

  /**
   * The column <code>view_structure.db_created</code>.
   */
  public final TableField<ViewStructureRecord, LocalDateTime> DB_CREATED = createField(DSL.name("db_created"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

  /**
   * The column <code>view_structure.db_imported</code>.
   */
  public final TableField<ViewStructureRecord, LocalDateTime> DB_IMPORTED = createField(DSL.name("db_imported"), SQLDataType.LOCALDATETIME(0), this, "");

  private ViewStructure(Name alias, Table<ViewStructureRecord> aliased) {
    this(alias, aliased, null);
  }

  private ViewStructure(Name alias, Table<ViewStructureRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>view_structure</code> table reference
   */
  public ViewStructure(String alias) {
    this(DSL.name(alias), VIEW_STRUCTURE);
  }

  /**
   * Create an aliased <code>view_structure</code> table reference
   */
  public ViewStructure(Name alias) {
    this(alias, VIEW_STRUCTURE);
  }

  /**
   * Create a <code>view_structure</code> table reference
   */
  public ViewStructure() {
    this(DSL.name("view_structure"), null);
  }

  public <O extends Record> ViewStructure(Table<O> child, ForeignKey<O, ViewStructureRecord> key) {
    super(child, key, VIEW_STRUCTURE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<ViewStructureRecord> getPrimaryKey() {
    return Keys.KEY_VIEW_STRUCTURE_PRIMARY;
  }

  @Override
  public List<UniqueKey<ViewStructureRecord>> getKeys() {
    return Arrays.<UniqueKey<ViewStructureRecord>>asList(Keys.KEY_VIEW_STRUCTURE_PRIMARY);
  }

  @Override
  public ViewStructure as(String alias) {
    return new ViewStructure(DSL.name(alias), this);
  }

  @Override
  public ViewStructure as(Name alias) {
    return new ViewStructure(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ViewStructure rename(String name) {
    return new ViewStructure(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ViewStructure rename(Name name) {
    return new ViewStructure(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, Integer, String, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
