/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.IntervalRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Interval extends TableImpl<IntervalRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>interval</code>
   */
  public static final Interval INTERVAL = new Interval();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<IntervalRecord> getRecordType() {
    return IntervalRecord.class;
  }

  /**
   * The column <code>interval.id</code>.
   */
  public final TableField<IntervalRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>interval.lower_value</code>.
   */
  public final TableField<IntervalRecord, String> LOWER_VALUE = createField(DSL.name("lower_value"), SQLDataType.VARCHAR(1000), this, "");

  /**
   * The column <code>interval.higher_value</code>.
   */
  public final TableField<IntervalRecord, String> HIGHER_VALUE = createField(DSL.name("higher_value"), SQLDataType.VARCHAR(1000), this, "");

  private Interval(Name alias, Table<IntervalRecord> aliased) {
    this(alias, aliased, null);
  }

  private Interval(Name alias, Table<IntervalRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>interval</code> table reference
   */
  public Interval(String alias) {
    this(DSL.name(alias), INTERVAL);
  }

  /**
   * Create an aliased <code>interval</code> table reference
   */
  public Interval(Name alias) {
    this(alias, INTERVAL);
  }

  /**
   * Create a <code>interval</code> table reference
   */
  public Interval() {
    this(DSL.name("interval"), null);
  }

  public <O extends Record> Interval(Table<O> child, ForeignKey<O, IntervalRecord> key) {
    super(child, key, INTERVAL);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<IntervalRecord> getPrimaryKey() {
    return Keys.KEY_INTERVAL_PRIMARY;
  }

  @Override
  public List<UniqueKey<IntervalRecord>> getKeys() {
    return Arrays.<UniqueKey<IntervalRecord>>asList(Keys.KEY_INTERVAL_PRIMARY);
  }

  @Override
  public Interval as(String alias) {
    return new Interval(DSL.name(alias), this);
  }

  @Override
  public Interval as(Name alias) {
    return new Interval(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Interval rename(String name) {
    return new Interval(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Interval rename(Name name) {
    return new Interval(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
