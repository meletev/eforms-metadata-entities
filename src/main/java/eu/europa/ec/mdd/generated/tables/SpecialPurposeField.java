/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.SpecialPurposeFieldRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpecialPurposeField extends TableImpl<SpecialPurposeFieldRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>special_purpose_field</code>
   */
  public static final SpecialPurposeField SPECIAL_PURPOSE_FIELD = new SpecialPurposeField();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<SpecialPurposeFieldRecord> getRecordType() {
    return SpecialPurposeFieldRecord.class;
  }

  /**
   * The column <code>special_purpose_field.id</code>.
   */
  public final TableField<SpecialPurposeFieldRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>special_purpose_field.description</code>.
   */
  public final TableField<SpecialPurposeFieldRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>special_purpose_field.field_id</code>.
   */
  public final TableField<SpecialPurposeFieldRecord, String> FIELD_ID = createField(DSL.name("field_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private SpecialPurposeField(Name alias, Table<SpecialPurposeFieldRecord> aliased) {
    this(alias, aliased, null);
  }

  private SpecialPurposeField(Name alias, Table<SpecialPurposeFieldRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>special_purpose_field</code> table reference
   */
  public SpecialPurposeField(String alias) {
    this(DSL.name(alias), SPECIAL_PURPOSE_FIELD);
  }

  /**
   * Create an aliased <code>special_purpose_field</code> table reference
   */
  public SpecialPurposeField(Name alias) {
    this(alias, SPECIAL_PURPOSE_FIELD);
  }

  /**
   * Create a <code>special_purpose_field</code> table reference
   */
  public SpecialPurposeField() {
    this(DSL.name("special_purpose_field"), null);
  }

  public <O extends Record> SpecialPurposeField(Table<O> child, ForeignKey<O, SpecialPurposeFieldRecord> key) {
    super(child, key, SPECIAL_PURPOSE_FIELD);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<SpecialPurposeFieldRecord> getPrimaryKey() {
    return Keys.KEY_SPECIAL_PURPOSE_FIELD_PRIMARY;
  }

  @Override
  public List<UniqueKey<SpecialPurposeFieldRecord>> getKeys() {
    return Arrays.<UniqueKey<SpecialPurposeFieldRecord>>asList(Keys.KEY_SPECIAL_PURPOSE_FIELD_PRIMARY, Keys.KEY_SPECIAL_PURPOSE_FIELD_DESCRIPTION, Keys.KEY_SPECIAL_PURPOSE_FIELD_FIELD_ID);
  }

  @Override
  public List<ForeignKey<SpecialPurposeFieldRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<SpecialPurposeFieldRecord, ?>>asList(Keys.SPECIAL_PURPOSE_FIELD_FIELD_ID_FK);
  }

  private transient eu.europa.ec.mdd.generated.tables.Field _field;

  public eu.europa.ec.mdd.generated.tables.Field field() {
    if (_field == null)
      _field = new eu.europa.ec.mdd.generated.tables.Field(this, Keys.SPECIAL_PURPOSE_FIELD_FIELD_ID_FK);

    return _field;
  }

  @Override
  public SpecialPurposeField as(String alias) {
    return new SpecialPurposeField(DSL.name(alias), this);
  }

  @Override
  public SpecialPurposeField as(Name alias) {
    return new SpecialPurposeField(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public SpecialPurposeField rename(String name) {
    return new SpecialPurposeField(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public SpecialPurposeField rename(Name name) {
    return new SpecialPurposeField(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
