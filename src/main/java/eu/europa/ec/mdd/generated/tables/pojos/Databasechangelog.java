/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.pojos;


import eu.europa.ec.mdd.generated.tables.interfaces.IDatabasechangelog;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Databasechangelog implements IDatabasechangelog {

  private static final long serialVersionUID = 1L;

  private String        id;
  private String        author;
  private String        filename;
  private LocalDateTime dateexecuted;
  private Integer       orderexecuted;
  private String        exectype;
  private String        md5sum;
  private String        description;
  private String        comments;
  private String        tag;
  private String        liquibase;
  private String        contexts;
  private String        labels;
  private String        deploymentId;

  public Databasechangelog() {}

  public Databasechangelog(IDatabasechangelog value) {
    this.id = value.getId();
    this.author = value.getAuthor();
    this.filename = value.getFilename();
    this.dateexecuted = value.getDateexecuted();
    this.orderexecuted = value.getOrderexecuted();
    this.exectype = value.getExectype();
    this.md5sum = value.getMd5sum();
    this.description = value.getDescription();
    this.comments = value.getComments();
    this.tag = value.getTag();
    this.liquibase = value.getLiquibase();
    this.contexts = value.getContexts();
    this.labels = value.getLabels();
    this.deploymentId = value.getDeploymentId();
  }

  public Databasechangelog(
    String        id,
    String        author,
    String        filename,
    LocalDateTime dateexecuted,
    Integer       orderexecuted,
    String        exectype,
    String        md5sum,
    String        description,
    String        comments,
    String        tag,
    String        liquibase,
    String        contexts,
    String        labels,
    String        deploymentId
  ) {
    this.id = id;
    this.author = author;
    this.filename = filename;
    this.dateexecuted = dateexecuted;
    this.orderexecuted = orderexecuted;
    this.exectype = exectype;
    this.md5sum = md5sum;
    this.description = description;
    this.comments = comments;
    this.tag = tag;
    this.liquibase = liquibase;
    this.contexts = contexts;
    this.labels = labels;
    this.deploymentId = deploymentId;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.ID</code>.
   */
  @Override
  public String getId() {
    return this.id;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.ID</code>.
   */
  @Override
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.AUTHOR</code>.
   */
  @Override
  public String getAuthor() {
    return this.author;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.AUTHOR</code>.
   */
  @Override
  public void setAuthor(String author) {
    this.author = author;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.FILENAME</code>.
   */
  @Override
  public String getFilename() {
    return this.filename;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.FILENAME</code>.
   */
  @Override
  public void setFilename(String filename) {
    this.filename = filename;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.DATEEXECUTED</code>.
   */
  @Override
  public LocalDateTime getDateexecuted() {
    return this.dateexecuted;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.DATEEXECUTED</code>.
   */
  @Override
  public void setDateexecuted(LocalDateTime dateexecuted) {
    this.dateexecuted = dateexecuted;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.ORDEREXECUTED</code>.
   */
  @Override
  public Integer getOrderexecuted() {
    return this.orderexecuted;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.ORDEREXECUTED</code>.
   */
  @Override
  public void setOrderexecuted(Integer orderexecuted) {
    this.orderexecuted = orderexecuted;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.EXECTYPE</code>.
   */
  @Override
  public String getExectype() {
    return this.exectype;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.EXECTYPE</code>.
   */
  @Override
  public void setExectype(String exectype) {
    this.exectype = exectype;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.MD5SUM</code>.
   */
  @Override
  public String getMd5sum() {
    return this.md5sum;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.MD5SUM</code>.
   */
  @Override
  public void setMd5sum(String md5sum) {
    this.md5sum = md5sum;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.DESCRIPTION</code>.
   */
  @Override
  public String getDescription() {
    return this.description;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.DESCRIPTION</code>.
   */
  @Override
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.COMMENTS</code>.
   */
  @Override
  public String getComments() {
    return this.comments;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.COMMENTS</code>.
   */
  @Override
  public void setComments(String comments) {
    this.comments = comments;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.TAG</code>.
   */
  @Override
  public String getTag() {
    return this.tag;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.TAG</code>.
   */
  @Override
  public void setTag(String tag) {
    this.tag = tag;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.LIQUIBASE</code>.
   */
  @Override
  public String getLiquibase() {
    return this.liquibase;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.LIQUIBASE</code>.
   */
  @Override
  public void setLiquibase(String liquibase) {
    this.liquibase = liquibase;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.CONTEXTS</code>.
   */
  @Override
  public String getContexts() {
    return this.contexts;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.CONTEXTS</code>.
   */
  @Override
  public void setContexts(String contexts) {
    this.contexts = contexts;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.LABELS</code>.
   */
  @Override
  public String getLabels() {
    return this.labels;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.LABELS</code>.
   */
  @Override
  public void setLabels(String labels) {
    this.labels = labels;
  }

  /**
   * Getter for <code>DATABASECHANGELOG.DEPLOYMENT_ID</code>.
   */
  @Override
  public String getDeploymentId() {
    return this.deploymentId;
  }

  /**
   * Setter for <code>DATABASECHANGELOG.DEPLOYMENT_ID</code>.
   */
  @Override
  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Databasechangelog (");

    sb.append(id);
    sb.append(", ").append(author);
    sb.append(", ").append(filename);
    sb.append(", ").append(dateexecuted);
    sb.append(", ").append(orderexecuted);
    sb.append(", ").append(exectype);
    sb.append(", ").append(md5sum);
    sb.append(", ").append(description);
    sb.append(", ").append(comments);
    sb.append(", ").append(tag);
    sb.append(", ").append(liquibase);
    sb.append(", ").append(contexts);
    sb.append(", ").append(labels);
    sb.append(", ").append(deploymentId);

    sb.append(")");
    return sb.toString();
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IDatabasechangelog from) {
    setId(from.getId());
    setAuthor(from.getAuthor());
    setFilename(from.getFilename());
    setDateexecuted(from.getDateexecuted());
    setOrderexecuted(from.getOrderexecuted());
    setExectype(from.getExectype());
    setMd5sum(from.getMd5sum());
    setDescription(from.getDescription());
    setComments(from.getComments());
    setTag(from.getTag());
    setLiquibase(from.getLiquibase());
    setContexts(from.getContexts());
    setLabels(from.getLabels());
    setDeploymentId(from.getDeploymentId());
  }

  @Override
  public <E extends IDatabasechangelog> E into(E into) {
    into.from(this);
    return into;
  }
}
