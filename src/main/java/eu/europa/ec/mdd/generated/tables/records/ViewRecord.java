/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.View;
import eu.europa.ec.mdd.generated.tables.interfaces.IView;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewRecord extends UpdatableRecordImpl<ViewRecord> implements Record5<String, String, String, Boolean, LocalDateTime>, IView {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>view.id</code>.
   */
  @Override
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>view.id</code>.
   */
  @Override
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>view.name</code>.
   */
  @Override
  public void setName(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>view.name</code>.
   */
  @Override
  public String getName() {
    return (String) get(1);
  }

  /**
   * Setter for <code>view.description</code>.
   */
  @Override
  public void setDescription(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>view.description</code>.
   */
  @Override
  public String getDescription() {
    return (String) get(2);
  }

  /**
   * Setter for <code>view.draft</code>. Drafts are excluded from the export
   */
  @Override
  public void setDraft(Boolean value) {
    set(3, value);
  }

  /**
   * Getter for <code>view.draft</code>. Drafts are excluded from the export
   */
  @Override
  public Boolean getDraft() {
    return (Boolean) get(3);
  }

  /**
   * Setter for <code>view.created</code>.
   */
  @Override
  public void setCreated(LocalDateTime value) {
    set(4, value);
  }

  /**
   * Getter for <code>view.created</code>.
   */
  @Override
  public LocalDateTime getCreated() {
    return (LocalDateTime) get(4);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row5<String, String, String, Boolean, LocalDateTime> fieldsRow() {
    return (Row5) super.fieldsRow();
  }

  @Override
  public Row5<String, String, String, Boolean, LocalDateTime> valuesRow() {
    return (Row5) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return View.VIEW.ID;
  }

  @Override
  public Field<String> field2() {
    return View.VIEW.NAME;
  }

  @Override
  public Field<String> field3() {
    return View.VIEW.DESCRIPTION;
  }

  @Override
  public Field<Boolean> field4() {
    return View.VIEW.DRAFT;
  }

  @Override
  public Field<LocalDateTime> field5() {
    return View.VIEW.CREATED;
  }

  @Override
  public String component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getName();
  }

  @Override
  public String component3() {
    return getDescription();
  }

  @Override
  public Boolean component4() {
    return getDraft();
  }

  @Override
  public LocalDateTime component5() {
    return getCreated();
  }

  @Override
  public String value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getName();
  }

  @Override
  public String value3() {
    return getDescription();
  }

  @Override
  public Boolean value4() {
    return getDraft();
  }

  @Override
  public LocalDateTime value5() {
    return getCreated();
  }

  @Override
  public ViewRecord value1(String value) {
    setId(value);
    return this;
  }

  @Override
  public ViewRecord value2(String value) {
    setName(value);
    return this;
  }

  @Override
  public ViewRecord value3(String value) {
    setDescription(value);
    return this;
  }

  @Override
  public ViewRecord value4(Boolean value) {
    setDraft(value);
    return this;
  }

  @Override
  public ViewRecord value5(LocalDateTime value) {
    setCreated(value);
    return this;
  }

  @Override
  public ViewRecord values(String value1, String value2, String value3, Boolean value4, LocalDateTime value5) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IView from) {
    setId(from.getId());
    setName(from.getName());
    setDescription(from.getDescription());
    setDraft(from.getDraft());
    setCreated(from.getCreated());
  }

  @Override
  public <E extends IView> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached ViewRecord
   */
  public ViewRecord() {
    super(View.VIEW);
  }

  /**
   * Create a detached, initialised ViewRecord
   */
  public ViewRecord(String id, String name, String description, Boolean draft, LocalDateTime created) {
    super(View.VIEW);

    setId(id);
    setName(name);
    setDescription(description);
    setDraft(draft);
    setCreated(created);
  }
}
