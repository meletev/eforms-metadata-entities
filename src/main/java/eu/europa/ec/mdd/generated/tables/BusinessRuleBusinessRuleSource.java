/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.BusinessRuleBusinessRuleSourceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusinessRuleBusinessRuleSource extends TableImpl<BusinessRuleBusinessRuleSourceRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>business_rule_business_rule_source</code>
   */
  public static final BusinessRuleBusinessRuleSource BUSINESS_RULE_BUSINESS_RULE_SOURCE = new BusinessRuleBusinessRuleSource();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<BusinessRuleBusinessRuleSourceRecord> getRecordType() {
    return BusinessRuleBusinessRuleSourceRecord.class;
  }

  /**
   * The column <code>business_rule_business_rule_source.business_rule_source_id</code>.
   */
  public final TableField<BusinessRuleBusinessRuleSourceRecord, String> BUSINESS_RULE_SOURCE_ID = createField(DSL.name("business_rule_source_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>business_rule_business_rule_source.business_rule_id</code>.
   */
  public final TableField<BusinessRuleBusinessRuleSourceRecord, String> BUSINESS_RULE_ID = createField(DSL.name("business_rule_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private BusinessRuleBusinessRuleSource(Name alias, Table<BusinessRuleBusinessRuleSourceRecord> aliased) {
    this(alias, aliased, null);
  }

  private BusinessRuleBusinessRuleSource(Name alias, Table<BusinessRuleBusinessRuleSourceRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>business_rule_business_rule_source</code> table reference
   */
  public BusinessRuleBusinessRuleSource(String alias) {
    this(DSL.name(alias), BUSINESS_RULE_BUSINESS_RULE_SOURCE);
  }

  /**
   * Create an aliased <code>business_rule_business_rule_source</code> table reference
   */
  public BusinessRuleBusinessRuleSource(Name alias) {
    this(alias, BUSINESS_RULE_BUSINESS_RULE_SOURCE);
  }

  /**
   * Create a <code>business_rule_business_rule_source</code> table reference
   */
  public BusinessRuleBusinessRuleSource() {
    this(DSL.name("business_rule_business_rule_source"), null);
  }

  public <O extends Record> BusinessRuleBusinessRuleSource(Table<O> child, ForeignKey<O, BusinessRuleBusinessRuleSourceRecord> key) {
    super(child, key, BUSINESS_RULE_BUSINESS_RULE_SOURCE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.BUSINESS_RULE_BUSINESS_RULE_SOURCE_BUSINESS_RULE_ID);
  }

  @Override
  public UniqueKey<BusinessRuleBusinessRuleSourceRecord> getPrimaryKey() {
    return Keys.KEY_BUSINESS_RULE_BUSINESS_RULE_SOURCE_PRIMARY;
  }

  @Override
  public List<UniqueKey<BusinessRuleBusinessRuleSourceRecord>> getKeys() {
    return Arrays.<UniqueKey<BusinessRuleBusinessRuleSourceRecord>>asList(Keys.KEY_BUSINESS_RULE_BUSINESS_RULE_SOURCE_PRIMARY);
  }

  @Override
  public List<ForeignKey<BusinessRuleBusinessRuleSourceRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<BusinessRuleBusinessRuleSourceRecord, ?>>asList(Keys.BUSINESS_RULE_BUSINESS_RULE_SOURCE_IBFK_1, Keys.BUSINESS_RULE_BUSINESS_RULE_SOURCE_IBFK_2);
  }

  private transient BusinessRuleSource _businessRuleSource;
  private transient BusinessRule _businessRule;

  public BusinessRuleSource businessRuleSource() {
    if (_businessRuleSource == null)
      _businessRuleSource = new BusinessRuleSource(this, Keys.BUSINESS_RULE_BUSINESS_RULE_SOURCE_IBFK_1);

    return _businessRuleSource;
  }

  public BusinessRule businessRule() {
    if (_businessRule == null)
      _businessRule = new BusinessRule(this, Keys.BUSINESS_RULE_BUSINESS_RULE_SOURCE_IBFK_2);

    return _businessRule;
  }

  @Override
  public BusinessRuleBusinessRuleSource as(String alias) {
    return new BusinessRuleBusinessRuleSource(DSL.name(alias), this);
  }

  @Override
  public BusinessRuleBusinessRuleSource as(Name alias) {
    return new BusinessRuleBusinessRuleSource(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public BusinessRuleBusinessRuleSource rename(String name) {
    return new BusinessRuleBusinessRuleSource(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public BusinessRuleBusinessRuleSource rename(Name name) {
    return new BusinessRuleBusinessRuleSource(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
