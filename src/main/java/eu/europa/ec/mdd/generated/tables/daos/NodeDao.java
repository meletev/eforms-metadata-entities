/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.daos;


import eu.europa.ec.mdd.generated.tables.Node;
import eu.europa.ec.mdd.generated.tables.records.NodeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * Contains XML nodes that contain other nodes or fields. Used to represent 
 * the XML structure except the leaf nodes (  which are the fields).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class NodeDao extends DAOImpl<NodeRecord, eu.europa.ec.mdd.generated.tables.pojos.Node, String> {

  /**
   * Create a new NodeDao without any configuration
   */
  public NodeDao() {
    super(Node.NODE, eu.europa.ec.mdd.generated.tables.pojos.Node.class);
  }

  /**
   * Create a new NodeDao with an attached configuration
   */
  @Autowired
  public NodeDao(Configuration configuration) {
    super(Node.NODE, eu.europa.ec.mdd.generated.tables.pojos.Node.class, configuration);
  }

  @Override
  public String getId(eu.europa.ec.mdd.generated.tables.pojos.Node object) {
    return object.getId();
  }

  /**
   * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
    return fetchRange(Node.NODE.ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchById(String... values) {
    return fetch(Node.NODE.ID, values);
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  public eu.europa.ec.mdd.generated.tables.pojos.Node fetchOneById(String value) {
    return fetchOne(Node.NODE.ID, value);
  }

  /**
   * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfParentId(String lowerInclusive, String upperInclusive) {
    return fetchRange(Node.NODE.PARENT_ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>parent_id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByParentId(String... values) {
    return fetch(Node.NODE.PARENT_ID, values);
  }

  /**
   * Fetch records that have <code>xpath_relative BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfXpathRelative(String lowerInclusive, String upperInclusive) {
    return fetchRange(Node.NODE.XPATH_RELATIVE, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>xpath_relative IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByXpathRelative(String... values) {
    return fetch(Node.NODE.XPATH_RELATIVE, values);
  }

  /**
   * Fetch records that have <code>repeatable BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfRepeatable(Boolean lowerInclusive, Boolean upperInclusive) {
    return fetchRange(Node.NODE.REPEATABLE, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>repeatable IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByRepeatable(Boolean... values) {
    return fetch(Node.NODE.REPEATABLE, values);
  }

  /**
   * Fetch records that have <code>identifier_field_id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfIdentifierFieldId(String lowerInclusive, String upperInclusive) {
    return fetchRange(Node.NODE.IDENTIFIER_FIELD_ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>identifier_field_id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByIdentifierFieldId(String... values) {
    return fetch(Node.NODE.IDENTIFIER_FIELD_ID, values);
  }

  /**
   * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
    return fetchRange(Node.NODE.NAME, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>name IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByName(String... values) {
    return fetch(Node.NODE.NAME, values);
  }

  /**
   * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
    return fetchRange(Node.NODE.DESCRIPTION, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>description IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByDescription(String... values) {
    return fetch(Node.NODE.DESCRIPTION, values);
  }

  /**
   * Fetch records that have <code>db_generated BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchRangeOfDbGenerated(Boolean lowerInclusive, Boolean upperInclusive) {
    return fetchRange(Node.NODE.DB_GENERATED, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>db_generated IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.Node> fetchByDbGenerated(Boolean... values) {
    return fetch(Node.NODE.DB_GENERATED, values);
  }
}
