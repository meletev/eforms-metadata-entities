/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.daos;


import eu.europa.ec.mdd.generated.tables.DocumentType;
import eu.europa.ec.mdd.generated.tables.records.DocumentTypeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DocumentTypeDao extends DAOImpl<DocumentTypeRecord, eu.europa.ec.mdd.generated.tables.pojos.DocumentType, String> {

  /**
   * Create a new DocumentTypeDao without any configuration
   */
  public DocumentTypeDao() {
    super(DocumentType.DOCUMENT_TYPE, eu.europa.ec.mdd.generated.tables.pojos.DocumentType.class);
  }

  /**
   * Create a new DocumentTypeDao with an attached configuration
   */
  @Autowired
  public DocumentTypeDao(Configuration configuration) {
    super(DocumentType.DOCUMENT_TYPE, eu.europa.ec.mdd.generated.tables.pojos.DocumentType.class, configuration);
  }

  @Override
  public String getId(eu.europa.ec.mdd.generated.tables.pojos.DocumentType object) {
    return object.getId();
  }

  /**
   * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
    return fetchRange(DocumentType.DOCUMENT_TYPE.ID, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchById(String... values) {
    return fetch(DocumentType.DOCUMENT_TYPE.ID, values);
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  public eu.europa.ec.mdd.generated.tables.pojos.DocumentType fetchOneById(String value) {
    return fetchOne(DocumentType.DOCUMENT_TYPE.ID, value);
  }

  /**
   * Fetch records that have <code>namespace BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchRangeOfNamespace(String lowerInclusive, String upperInclusive) {
    return fetchRange(DocumentType.DOCUMENT_TYPE.NAMESPACE, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>namespace IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchByNamespace(String... values) {
    return fetch(DocumentType.DOCUMENT_TYPE.NAMESPACE, values);
  }

  /**
   * Fetch records that have <code>root_element BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchRangeOfRootElement(String lowerInclusive, String upperInclusive) {
    return fetchRange(DocumentType.DOCUMENT_TYPE.ROOT_ELEMENT, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>root_element IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchByRootElement(String... values) {
    return fetch(DocumentType.DOCUMENT_TYPE.ROOT_ELEMENT, values);
  }

  /**
   * Fetch records that have <code>schema_location BETWEEN lowerInclusive AND upperInclusive</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchRangeOfSchemaLocation(String lowerInclusive, String upperInclusive) {
    return fetchRange(DocumentType.DOCUMENT_TYPE.SCHEMA_LOCATION, lowerInclusive, upperInclusive);
  }

  /**
   * Fetch records that have <code>schema_location IN (values)</code>
   */
  public List<eu.europa.ec.mdd.generated.tables.pojos.DocumentType> fetchBySchemaLocation(String... values) {
    return fetch(DocumentType.DOCUMENT_TYPE.SCHEMA_LOCATION, values);
  }
}
