/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.records;


import eu.europa.ec.mdd.generated.tables.Version;
import eu.europa.ec.mdd.generated.tables.interfaces.IVersion;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VersionRecord extends UpdatableRecordImpl<VersionRecord> implements Record3<String, LocalDateTime, Boolean>, IVersion {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>version.id</code>.
   */
  @Override
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>version.id</code>.
   */
  @Override
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>version.updated_on</code>.
   */
  @Override
  public void setUpdatedOn(LocalDateTime value) {
    set(1, value);
  }

  /**
   * Getter for <code>version.updated_on</code>.
   */
  @Override
  public LocalDateTime getUpdatedOn() {
    return (LocalDateTime) get(1);
  }

  /**
   * Setter for <code>version.up_to_date</code>.
   */
  @Override
  public void setUpToDate(Boolean value) {
    set(2, value);
  }

  /**
   * Getter for <code>version.up_to_date</code>.
   */
  @Override
  public Boolean getUpToDate() {
    return (Boolean) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, LocalDateTime, Boolean> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<String, LocalDateTime, Boolean> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Version.VERSION.ID;
  }

  @Override
  public Field<LocalDateTime> field2() {
    return Version.VERSION.UPDATED_ON;
  }

  @Override
  public Field<Boolean> field3() {
    return Version.VERSION.UP_TO_DATE;
  }

  @Override
  public String component1() {
    return getId();
  }

  @Override
  public LocalDateTime component2() {
    return getUpdatedOn();
  }

  @Override
  public Boolean component3() {
    return getUpToDate();
  }

  @Override
  public String value1() {
    return getId();
  }

  @Override
  public LocalDateTime value2() {
    return getUpdatedOn();
  }

  @Override
  public Boolean value3() {
    return getUpToDate();
  }

  @Override
  public VersionRecord value1(String value) {
    setId(value);
    return this;
  }

  @Override
  public VersionRecord value2(LocalDateTime value) {
    setUpdatedOn(value);
    return this;
  }

  @Override
  public VersionRecord value3(Boolean value) {
    setUpToDate(value);
    return this;
  }

  @Override
  public VersionRecord values(String value1, LocalDateTime value2, Boolean value3) {
    value1(value1);
    value2(value2);
    value3(value3);
    return this;
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(IVersion from) {
    setId(from.getId());
    setUpdatedOn(from.getUpdatedOn());
    setUpToDate(from.getUpToDate());
  }

  @Override
  public <E extends IVersion> E into(E into) {
    into.from(this);
    return into;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached VersionRecord
   */
  public VersionRecord() {
    super(Version.VERSION);
  }

  /**
   * Create a detached, initialised VersionRecord
   */
  public VersionRecord(String id, LocalDateTime updatedOn, Boolean upToDate) {
    super(Version.VERSION);

    setId(id);
    setUpdatedOn(updatedOn);
    setUpToDate(upToDate);
  }
}
