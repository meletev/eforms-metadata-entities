/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.NoticeToViewRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoticeToView extends TableImpl<NoticeToViewRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>notice_to_view</code>
   */
  public static final NoticeToView NOTICE_TO_VIEW = new NoticeToView();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<NoticeToViewRecord> getRecordType() {
    return NoticeToViewRecord.class;
  }

  /**
   * The column <code>notice_to_view.notice_id</code>.
   */
  public final TableField<NoticeToViewRecord, String> NOTICE_ID = createField(DSL.name("notice_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>notice_to_view.view_id</code>.
   */
  public final TableField<NoticeToViewRecord, String> VIEW_ID = createField(DSL.name("view_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  private NoticeToView(Name alias, Table<NoticeToViewRecord> aliased) {
    this(alias, aliased, null);
  }

  private NoticeToView(Name alias, Table<NoticeToViewRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>notice_to_view</code> table reference
   */
  public NoticeToView(String alias) {
    this(DSL.name(alias), NOTICE_TO_VIEW);
  }

  /**
   * Create an aliased <code>notice_to_view</code> table reference
   */
  public NoticeToView(Name alias) {
    this(alias, NOTICE_TO_VIEW);
  }

  /**
   * Create a <code>notice_to_view</code> table reference
   */
  public NoticeToView() {
    this(DSL.name("notice_to_view"), null);
  }

  public <O extends Record> NoticeToView(Table<O> child, ForeignKey<O, NoticeToViewRecord> key) {
    super(child, key, NOTICE_TO_VIEW);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.NOTICE_TO_VIEW_FK_NOTICE_TO_VIEW_NOTICE1_IDX, Indexes.NOTICE_TO_VIEW_FK_NOTICE_TO_VIEW_VIEW1_IDX);
  }

  @Override
  public UniqueKey<NoticeToViewRecord> getPrimaryKey() {
    return Keys.KEY_NOTICE_TO_VIEW_PRIMARY;
  }

  @Override
  public List<UniqueKey<NoticeToViewRecord>> getKeys() {
    return Arrays.<UniqueKey<NoticeToViewRecord>>asList(Keys.KEY_NOTICE_TO_VIEW_PRIMARY);
  }

  @Override
  public List<ForeignKey<NoticeToViewRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<NoticeToViewRecord, ?>>asList(Keys.FK_NOTICE_TO_VIEW_NOTICE1, Keys.FK_NOTICE_TO_VIEW_VIEW1);
  }

  private transient Notice _notice;
  private transient View _view;

  public Notice notice() {
    if (_notice == null)
      _notice = new Notice(this, Keys.FK_NOTICE_TO_VIEW_NOTICE1);

    return _notice;
  }

  public View view() {
    if (_view == null)
      _view = new View(this, Keys.FK_NOTICE_TO_VIEW_VIEW1);

    return _view;
  }

  @Override
  public NoticeToView as(String alias) {
    return new NoticeToView(DSL.name(alias), this);
  }

  @Override
  public NoticeToView as(Name alias) {
    return new NoticeToView(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public NoticeToView rename(String name) {
    return new NoticeToView(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public NoticeToView rename(Name name) {
    return new NoticeToView(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
