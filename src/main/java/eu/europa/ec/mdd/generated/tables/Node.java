/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables;


import eu.europa.ec.mdd.generated.DefaultSchema;
import eu.europa.ec.mdd.generated.Indexes;
import eu.europa.ec.mdd.generated.Keys;
import eu.europa.ec.mdd.generated.tables.records.NodeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Contains XML nodes that contain other nodes or fields. Used to represent 
 * the XML structure except the leaf nodes (  which are the fields).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Node extends TableImpl<NodeRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>node</code>
   */
  public static final Node NODE = new Node();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<NodeRecord> getRecordType() {
    return NodeRecord.class;
  }

  /**
   * The column <code>node.id</code>.
   */
  public final TableField<NodeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>node.parent_id</code>.
   */
  public final TableField<NodeRecord, String> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>node.xpath_relative</code>.
   */
  public final TableField<NodeRecord, String> XPATH_RELATIVE = createField(DSL.name("xpath_relative"), SQLDataType.VARCHAR(1000), this, "");

  /**
   * The column <code>node.repeatable</code>.
   */
  public final TableField<NodeRecord, Boolean> REPEATABLE = createField(DSL.name("repeatable"), SQLDataType.BOOLEAN, this, "");

  /**
   * The column <code>node.identifier_field_id</code>. If the node is repeatable, then the identifier_field_id should point to the field of type "id" which is supposed to hold the identifier of whatever entities this repeatable node contains.
   */
  public final TableField<NodeRecord, String> IDENTIFIER_FIELD_ID = createField(DSL.name("identifier_field_id"), SQLDataType.VARCHAR(255), this, "If the node is repeatable, then the identifier_field_id should point to the field of type \"id\" which is supposed to hold the identifier of whatever entities this repeatable node contains.");

  /**
   * The column <code>node.name</code>. Human readable name
   */
  public final TableField<NodeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "Human readable name");

  /**
   * The column <code>node.description</code>.
   */
  public final TableField<NodeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

  /**
   * The column <code>node.db_generated</code>.
   */
  public final TableField<NodeRecord, Boolean> DB_GENERATED = createField(DSL.name("db_generated"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

  private Node(Name alias, Table<NodeRecord> aliased) {
    this(alias, aliased, null);
  }

  private Node(Name alias, Table<NodeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment("Contains XML nodes that contain other nodes or fields. Used to represent the XML structure except the leaf nodes (which are the fields)."), TableOptions.table());
  }

  /**
   * Create an aliased <code>node</code> table reference
   */
  public Node(String alias) {
    this(DSL.name(alias), NODE);
  }

  /**
   * Create an aliased <code>node</code> table reference
   */
  public Node(Name alias) {
    this(alias, NODE);
  }

  /**
   * Create a <code>node</code> table reference
   */
  public Node() {
    this(DSL.name("node"), null);
  }

  public <O extends Record> Node(Table<O> child, ForeignKey<O, NodeRecord> key) {
    super(child, key, NODE);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.NODE_FK_NODE_FIELD1_IDX);
  }

  @Override
  public UniqueKey<NodeRecord> getPrimaryKey() {
    return Keys.KEY_NODE_PRIMARY;
  }

  @Override
  public List<UniqueKey<NodeRecord>> getKeys() {
    return Arrays.<UniqueKey<NodeRecord>>asList(Keys.KEY_NODE_PRIMARY);
  }

  @Override
  public List<ForeignKey<NodeRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<NodeRecord, ?>>asList(Keys.FK_NODE_FIELD1);
  }

  private transient eu.europa.ec.mdd.generated.tables.Field _field;

  public eu.europa.ec.mdd.generated.tables.Field field() {
    if (_field == null)
      _field = new eu.europa.ec.mdd.generated.tables.Field(this, Keys.FK_NODE_FIELD1);

    return _field;
  }

  @Override
  public Node as(String alias) {
    return new Node(DSL.name(alias), this);
  }

  @Override
  public Node as(Name alias) {
    return new Node(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Node rename(String name) {
    return new Node(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Node rename(Name name) {
    return new Node(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, String, Boolean, String, String, String, Boolean> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
