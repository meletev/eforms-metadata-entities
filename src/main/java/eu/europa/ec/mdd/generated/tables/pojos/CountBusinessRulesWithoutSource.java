/*
 * This file is generated by jOOQ.
 */
package eu.europa.ec.mdd.generated.tables.pojos;


import eu.europa.ec.mdd.generated.enums.CountBusinessRulesWithoutSourceType;
import eu.europa.ec.mdd.generated.tables.interfaces.ICountBusinessRulesWithoutSource;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountBusinessRulesWithoutSource implements ICountBusinessRulesWithoutSource {

  private static final long serialVersionUID = 1L;

  private CountBusinessRulesWithoutSourceType type;
  private Long                                withSource;
  private Long                                withoutSource;
  private Long                                total;

  public CountBusinessRulesWithoutSource() {}

  public CountBusinessRulesWithoutSource(ICountBusinessRulesWithoutSource value) {
    this.type = value.getType();
    this.withSource = value.getWithSource();
    this.withoutSource = value.getWithoutSource();
    this.total = value.getTotal();
  }

  public CountBusinessRulesWithoutSource(
    CountBusinessRulesWithoutSourceType type,
    Long                                withSource,
    Long                                withoutSource,
    Long                                total
  ) {
    this.type = type;
    this.withSource = withSource;
    this.withoutSource = withoutSource;
    this.total = total;
  }

  /**
   * Getter for <code>count_business_rules_without_source.type</code>.
   */
  @Override
  public CountBusinessRulesWithoutSourceType getType() {
    return this.type;
  }

  /**
   * Setter for <code>count_business_rules_without_source.type</code>.
   */
  @Override
  public void setType(CountBusinessRulesWithoutSourceType type) {
    this.type = type;
  }

  /**
   * Getter for <code>count_business_rules_without_source.with_source</code>.
   */
  @Override
  public Long getWithSource() {
    return this.withSource;
  }

  /**
   * Setter for <code>count_business_rules_without_source.with_source</code>.
   */
  @Override
  public void setWithSource(Long withSource) {
    this.withSource = withSource;
  }

  /**
   * Getter for <code>count_business_rules_without_source.without_source</code>.
   */
  @Override
  public Long getWithoutSource() {
    return this.withoutSource;
  }

  /**
   * Setter for <code>count_business_rules_without_source.without_source</code>.
   */
  @Override
  public void setWithoutSource(Long withoutSource) {
    this.withoutSource = withoutSource;
  }

  /**
   * Getter for <code>count_business_rules_without_source.total</code>.
   */
  @Override
  public Long getTotal() {
    return this.total;
  }

  /**
   * Setter for <code>count_business_rules_without_source.total</code>.
   */
  @Override
  public void setTotal(Long total) {
    this.total = total;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CountBusinessRulesWithoutSource (");

    sb.append(type);
    sb.append(", ").append(withSource);
    sb.append(", ").append(withoutSource);
    sb.append(", ").append(total);

    sb.append(")");
    return sb.toString();
  }

  // -------------------------------------------------------------------------
  // FROM and INTO
  // -------------------------------------------------------------------------

  @Override
  public void from(ICountBusinessRulesWithoutSource from) {
    setType(from.getType());
    setWithSource(from.getWithSource());
    setWithoutSource(from.getWithoutSource());
    setTotal(from.getTotal());
  }

  @Override
  public <E extends ICountBusinessRulesWithoutSource> E into(E into) {
    into.from(this);
    return into;
  }
}
